                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.0 #6037 (Oct 31 2010) (MINGW32)
                              4 ; This file was generated Fri Dec 15 23:18:10 2017
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _putRandom
                             14 	.globl _createAndStorePacmanCharacters
                             15 	.globl _timer0_isr
                             16 	.globl _timer0Init
                             17 	.globl __sdcc_external_startup
                             18 	.globl _P5_7
                             19 	.globl _P5_6
                             20 	.globl _P5_5
                             21 	.globl _P5_4
                             22 	.globl _P5_3
                             23 	.globl _P5_2
                             24 	.globl _P5_1
                             25 	.globl _P5_0
                             26 	.globl _P4_7
                             27 	.globl _P4_6
                             28 	.globl _P4_5
                             29 	.globl _P4_4
                             30 	.globl _P4_3
                             31 	.globl _P4_2
                             32 	.globl _P4_1
                             33 	.globl _P4_0
                             34 	.globl _PX0L
                             35 	.globl _PT0L
                             36 	.globl _PX1L
                             37 	.globl _PT1L
                             38 	.globl _PLS
                             39 	.globl _PT2L
                             40 	.globl _PPCL
                             41 	.globl _EC
                             42 	.globl _CCF0
                             43 	.globl _CCF1
                             44 	.globl _CCF2
                             45 	.globl _CCF3
                             46 	.globl _CCF4
                             47 	.globl _CR
                             48 	.globl _CF
                             49 	.globl _TF2
                             50 	.globl _EXF2
                             51 	.globl _RCLK
                             52 	.globl _TCLK
                             53 	.globl _EXEN2
                             54 	.globl _TR2
                             55 	.globl _C_T2
                             56 	.globl _CP_RL2
                             57 	.globl _T2CON_7
                             58 	.globl _T2CON_6
                             59 	.globl _T2CON_5
                             60 	.globl _T2CON_4
                             61 	.globl _T2CON_3
                             62 	.globl _T2CON_2
                             63 	.globl _T2CON_1
                             64 	.globl _T2CON_0
                             65 	.globl _PT2
                             66 	.globl _ET2
                             67 	.globl _CY
                             68 	.globl _AC
                             69 	.globl _F0
                             70 	.globl _RS1
                             71 	.globl _RS0
                             72 	.globl _OV
                             73 	.globl _F1
                             74 	.globl _P
                             75 	.globl _PS
                             76 	.globl _PT1
                             77 	.globl _PX1
                             78 	.globl _PT0
                             79 	.globl _PX0
                             80 	.globl _RD
                             81 	.globl _WR
                             82 	.globl _T1
                             83 	.globl _T0
                             84 	.globl _INT1
                             85 	.globl _INT0
                             86 	.globl _TXD
                             87 	.globl _RXD
                             88 	.globl _P3_7
                             89 	.globl _P3_6
                             90 	.globl _P3_5
                             91 	.globl _P3_4
                             92 	.globl _P3_3
                             93 	.globl _P3_2
                             94 	.globl _P3_1
                             95 	.globl _P3_0
                             96 	.globl _EA
                             97 	.globl _ES
                             98 	.globl _ET1
                             99 	.globl _EX1
                            100 	.globl _ET0
                            101 	.globl _EX0
                            102 	.globl _P2_7
                            103 	.globl _P2_6
                            104 	.globl _P2_5
                            105 	.globl _P2_4
                            106 	.globl _P2_3
                            107 	.globl _P2_2
                            108 	.globl _P2_1
                            109 	.globl _P2_0
                            110 	.globl _SM0
                            111 	.globl _SM1
                            112 	.globl _SM2
                            113 	.globl _REN
                            114 	.globl _TB8
                            115 	.globl _RB8
                            116 	.globl _TI
                            117 	.globl _RI
                            118 	.globl _P1_7
                            119 	.globl _P1_6
                            120 	.globl _P1_5
                            121 	.globl _P1_4
                            122 	.globl _P1_3
                            123 	.globl _P1_2
                            124 	.globl _P1_1
                            125 	.globl _P1_0
                            126 	.globl _TF1
                            127 	.globl _TR1
                            128 	.globl _TF0
                            129 	.globl _TR0
                            130 	.globl _IE1
                            131 	.globl _IT1
                            132 	.globl _IE0
                            133 	.globl _IT0
                            134 	.globl _P0_7
                            135 	.globl _P0_6
                            136 	.globl _P0_5
                            137 	.globl _P0_4
                            138 	.globl _P0_3
                            139 	.globl _P0_2
                            140 	.globl _P0_1
                            141 	.globl _P0_0
                            142 	.globl _EECON
                            143 	.globl _KBF
                            144 	.globl _KBE
                            145 	.globl _KBLS
                            146 	.globl _BRL
                            147 	.globl _BDRCON
                            148 	.globl _T2MOD
                            149 	.globl _SPDAT
                            150 	.globl _SPSTA
                            151 	.globl _SPCON
                            152 	.globl _SADEN
                            153 	.globl _SADDR
                            154 	.globl _WDTPRG
                            155 	.globl _WDTRST
                            156 	.globl _P5
                            157 	.globl _P4
                            158 	.globl _IPH1
                            159 	.globl _IPL1
                            160 	.globl _IPH0
                            161 	.globl _IPL0
                            162 	.globl _IEN1
                            163 	.globl _IEN0
                            164 	.globl _CMOD
                            165 	.globl _CL
                            166 	.globl _CH
                            167 	.globl _CCON
                            168 	.globl _CCAPM4
                            169 	.globl _CCAPM3
                            170 	.globl _CCAPM2
                            171 	.globl _CCAPM1
                            172 	.globl _CCAPM0
                            173 	.globl _CCAP4L
                            174 	.globl _CCAP3L
                            175 	.globl _CCAP2L
                            176 	.globl _CCAP1L
                            177 	.globl _CCAP0L
                            178 	.globl _CCAP4H
                            179 	.globl _CCAP3H
                            180 	.globl _CCAP2H
                            181 	.globl _CCAP1H
                            182 	.globl _CCAP0H
                            183 	.globl _CKCON1
                            184 	.globl _CKCON0
                            185 	.globl _CKRL
                            186 	.globl _AUXR1
                            187 	.globl _AUXR
                            188 	.globl _TH2
                            189 	.globl _TL2
                            190 	.globl _RCAP2H
                            191 	.globl _RCAP2L
                            192 	.globl _T2CON
                            193 	.globl _B
                            194 	.globl _ACC
                            195 	.globl _PSW
                            196 	.globl _IP
                            197 	.globl _P3
                            198 	.globl _IE
                            199 	.globl _P2
                            200 	.globl _SBUF
                            201 	.globl _SCON
                            202 	.globl _P1
                            203 	.globl _TH1
                            204 	.globl _TH0
                            205 	.globl _TL1
                            206 	.globl _TL0
                            207 	.globl _TMOD
                            208 	.globl _TCON
                            209 	.globl _PCON
                            210 	.globl _DPH
                            211 	.globl _DPL
                            212 	.globl _SP
                            213 	.globl _P0
                            214 	.globl _timerINTcount
                            215 	.globl _timeout
                            216 	.globl _y_random
                            217 	.globl _x_random
                            218 	.globl _xyz_data
                            219 	.globl _ch_data
                            220 	.globl _y_move
                            221 	.globl _x_move
                            222 	.globl _x
                            223 	.globl _j
                            224 	.globl _i
                            225 	.globl _lcd_data_read
                            226 	.globl _lcd_data_wr
                            227 	.globl _lcd_cmd_r
                            228 	.globl _lcd_cmd_wr
                            229 ;--------------------------------------------------------
                            230 ; special function registers
                            231 ;--------------------------------------------------------
                            232 	.area RSEG    (ABS,DATA)
   0000                     233 	.org 0x0000
                    0080    234 _P0	=	0x0080
                    0081    235 _SP	=	0x0081
                    0082    236 _DPL	=	0x0082
                    0083    237 _DPH	=	0x0083
                    0087    238 _PCON	=	0x0087
                    0088    239 _TCON	=	0x0088
                    0089    240 _TMOD	=	0x0089
                    008A    241 _TL0	=	0x008a
                    008B    242 _TL1	=	0x008b
                    008C    243 _TH0	=	0x008c
                    008D    244 _TH1	=	0x008d
                    0090    245 _P1	=	0x0090
                    0098    246 _SCON	=	0x0098
                    0099    247 _SBUF	=	0x0099
                    00A0    248 _P2	=	0x00a0
                    00A8    249 _IE	=	0x00a8
                    00B0    250 _P3	=	0x00b0
                    00B8    251 _IP	=	0x00b8
                    00D0    252 _PSW	=	0x00d0
                    00E0    253 _ACC	=	0x00e0
                    00F0    254 _B	=	0x00f0
                    00C8    255 _T2CON	=	0x00c8
                    00CA    256 _RCAP2L	=	0x00ca
                    00CB    257 _RCAP2H	=	0x00cb
                    00CC    258 _TL2	=	0x00cc
                    00CD    259 _TH2	=	0x00cd
                    008E    260 _AUXR	=	0x008e
                    00A2    261 _AUXR1	=	0x00a2
                    0097    262 _CKRL	=	0x0097
                    008F    263 _CKCON0	=	0x008f
                    00AF    264 _CKCON1	=	0x00af
                    00FA    265 _CCAP0H	=	0x00fa
                    00FB    266 _CCAP1H	=	0x00fb
                    00FC    267 _CCAP2H	=	0x00fc
                    00FD    268 _CCAP3H	=	0x00fd
                    00FE    269 _CCAP4H	=	0x00fe
                    00EA    270 _CCAP0L	=	0x00ea
                    00EB    271 _CCAP1L	=	0x00eb
                    00EC    272 _CCAP2L	=	0x00ec
                    00ED    273 _CCAP3L	=	0x00ed
                    00EE    274 _CCAP4L	=	0x00ee
                    00DA    275 _CCAPM0	=	0x00da
                    00DB    276 _CCAPM1	=	0x00db
                    00DC    277 _CCAPM2	=	0x00dc
                    00DD    278 _CCAPM3	=	0x00dd
                    00DE    279 _CCAPM4	=	0x00de
                    00D8    280 _CCON	=	0x00d8
                    00F9    281 _CH	=	0x00f9
                    00E9    282 _CL	=	0x00e9
                    00D9    283 _CMOD	=	0x00d9
                    00A8    284 _IEN0	=	0x00a8
                    00B1    285 _IEN1	=	0x00b1
                    00B8    286 _IPL0	=	0x00b8
                    00B7    287 _IPH0	=	0x00b7
                    00B2    288 _IPL1	=	0x00b2
                    00B3    289 _IPH1	=	0x00b3
                    00C0    290 _P4	=	0x00c0
                    00E8    291 _P5	=	0x00e8
                    00A6    292 _WDTRST	=	0x00a6
                    00A7    293 _WDTPRG	=	0x00a7
                    00A9    294 _SADDR	=	0x00a9
                    00B9    295 _SADEN	=	0x00b9
                    00C3    296 _SPCON	=	0x00c3
                    00C4    297 _SPSTA	=	0x00c4
                    00C5    298 _SPDAT	=	0x00c5
                    00C9    299 _T2MOD	=	0x00c9
                    009B    300 _BDRCON	=	0x009b
                    009A    301 _BRL	=	0x009a
                    009C    302 _KBLS	=	0x009c
                    009D    303 _KBE	=	0x009d
                    009E    304 _KBF	=	0x009e
                    00D2    305 _EECON	=	0x00d2
                            306 ;--------------------------------------------------------
                            307 ; special function bits
                            308 ;--------------------------------------------------------
                            309 	.area RSEG    (ABS,DATA)
   0000                     310 	.org 0x0000
                    0080    311 _P0_0	=	0x0080
                    0081    312 _P0_1	=	0x0081
                    0082    313 _P0_2	=	0x0082
                    0083    314 _P0_3	=	0x0083
                    0084    315 _P0_4	=	0x0084
                    0085    316 _P0_5	=	0x0085
                    0086    317 _P0_6	=	0x0086
                    0087    318 _P0_7	=	0x0087
                    0088    319 _IT0	=	0x0088
                    0089    320 _IE0	=	0x0089
                    008A    321 _IT1	=	0x008a
                    008B    322 _IE1	=	0x008b
                    008C    323 _TR0	=	0x008c
                    008D    324 _TF0	=	0x008d
                    008E    325 _TR1	=	0x008e
                    008F    326 _TF1	=	0x008f
                    0090    327 _P1_0	=	0x0090
                    0091    328 _P1_1	=	0x0091
                    0092    329 _P1_2	=	0x0092
                    0093    330 _P1_3	=	0x0093
                    0094    331 _P1_4	=	0x0094
                    0095    332 _P1_5	=	0x0095
                    0096    333 _P1_6	=	0x0096
                    0097    334 _P1_7	=	0x0097
                    0098    335 _RI	=	0x0098
                    0099    336 _TI	=	0x0099
                    009A    337 _RB8	=	0x009a
                    009B    338 _TB8	=	0x009b
                    009C    339 _REN	=	0x009c
                    009D    340 _SM2	=	0x009d
                    009E    341 _SM1	=	0x009e
                    009F    342 _SM0	=	0x009f
                    00A0    343 _P2_0	=	0x00a0
                    00A1    344 _P2_1	=	0x00a1
                    00A2    345 _P2_2	=	0x00a2
                    00A3    346 _P2_3	=	0x00a3
                    00A4    347 _P2_4	=	0x00a4
                    00A5    348 _P2_5	=	0x00a5
                    00A6    349 _P2_6	=	0x00a6
                    00A7    350 _P2_7	=	0x00a7
                    00A8    351 _EX0	=	0x00a8
                    00A9    352 _ET0	=	0x00a9
                    00AA    353 _EX1	=	0x00aa
                    00AB    354 _ET1	=	0x00ab
                    00AC    355 _ES	=	0x00ac
                    00AF    356 _EA	=	0x00af
                    00B0    357 _P3_0	=	0x00b0
                    00B1    358 _P3_1	=	0x00b1
                    00B2    359 _P3_2	=	0x00b2
                    00B3    360 _P3_3	=	0x00b3
                    00B4    361 _P3_4	=	0x00b4
                    00B5    362 _P3_5	=	0x00b5
                    00B6    363 _P3_6	=	0x00b6
                    00B7    364 _P3_7	=	0x00b7
                    00B0    365 _RXD	=	0x00b0
                    00B1    366 _TXD	=	0x00b1
                    00B2    367 _INT0	=	0x00b2
                    00B3    368 _INT1	=	0x00b3
                    00B4    369 _T0	=	0x00b4
                    00B5    370 _T1	=	0x00b5
                    00B6    371 _WR	=	0x00b6
                    00B7    372 _RD	=	0x00b7
                    00B8    373 _PX0	=	0x00b8
                    00B9    374 _PT0	=	0x00b9
                    00BA    375 _PX1	=	0x00ba
                    00BB    376 _PT1	=	0x00bb
                    00BC    377 _PS	=	0x00bc
                    00D0    378 _P	=	0x00d0
                    00D1    379 _F1	=	0x00d1
                    00D2    380 _OV	=	0x00d2
                    00D3    381 _RS0	=	0x00d3
                    00D4    382 _RS1	=	0x00d4
                    00D5    383 _F0	=	0x00d5
                    00D6    384 _AC	=	0x00d6
                    00D7    385 _CY	=	0x00d7
                    00AD    386 _ET2	=	0x00ad
                    00BD    387 _PT2	=	0x00bd
                    00C8    388 _T2CON_0	=	0x00c8
                    00C9    389 _T2CON_1	=	0x00c9
                    00CA    390 _T2CON_2	=	0x00ca
                    00CB    391 _T2CON_3	=	0x00cb
                    00CC    392 _T2CON_4	=	0x00cc
                    00CD    393 _T2CON_5	=	0x00cd
                    00CE    394 _T2CON_6	=	0x00ce
                    00CF    395 _T2CON_7	=	0x00cf
                    00C8    396 _CP_RL2	=	0x00c8
                    00C9    397 _C_T2	=	0x00c9
                    00CA    398 _TR2	=	0x00ca
                    00CB    399 _EXEN2	=	0x00cb
                    00CC    400 _TCLK	=	0x00cc
                    00CD    401 _RCLK	=	0x00cd
                    00CE    402 _EXF2	=	0x00ce
                    00CF    403 _TF2	=	0x00cf
                    00DF    404 _CF	=	0x00df
                    00DE    405 _CR	=	0x00de
                    00DC    406 _CCF4	=	0x00dc
                    00DB    407 _CCF3	=	0x00db
                    00DA    408 _CCF2	=	0x00da
                    00D9    409 _CCF1	=	0x00d9
                    00D8    410 _CCF0	=	0x00d8
                    00AE    411 _EC	=	0x00ae
                    00BE    412 _PPCL	=	0x00be
                    00BD    413 _PT2L	=	0x00bd
                    00BC    414 _PLS	=	0x00bc
                    00BB    415 _PT1L	=	0x00bb
                    00BA    416 _PX1L	=	0x00ba
                    00B9    417 _PT0L	=	0x00b9
                    00B8    418 _PX0L	=	0x00b8
                    00C0    419 _P4_0	=	0x00c0
                    00C1    420 _P4_1	=	0x00c1
                    00C2    421 _P4_2	=	0x00c2
                    00C3    422 _P4_3	=	0x00c3
                    00C4    423 _P4_4	=	0x00c4
                    00C5    424 _P4_5	=	0x00c5
                    00C6    425 _P4_6	=	0x00c6
                    00C7    426 _P4_7	=	0x00c7
                    00E8    427 _P5_0	=	0x00e8
                    00E9    428 _P5_1	=	0x00e9
                    00EA    429 _P5_2	=	0x00ea
                    00EB    430 _P5_3	=	0x00eb
                    00EC    431 _P5_4	=	0x00ec
                    00ED    432 _P5_5	=	0x00ed
                    00EE    433 _P5_6	=	0x00ee
                    00EF    434 _P5_7	=	0x00ef
                            435 ;--------------------------------------------------------
                            436 ; overlayable register banks
                            437 ;--------------------------------------------------------
                            438 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     439 	.ds 8
                            440 ;--------------------------------------------------------
                            441 ; overlayable bit register bank
                            442 ;--------------------------------------------------------
                            443 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     444 bits:
   0000                     445 	.ds 1
                    8000    446 	b0 = bits[0]
                    8100    447 	b1 = bits[1]
                    8200    448 	b2 = bits[2]
                    8300    449 	b3 = bits[3]
                    8400    450 	b4 = bits[4]
                    8500    451 	b5 = bits[5]
                    8600    452 	b6 = bits[6]
                    8700    453 	b7 = bits[7]
                            454 ;--------------------------------------------------------
                            455 ; internal ram data
                            456 ;--------------------------------------------------------
                            457 	.area DSEG    (DATA)
                            458 ;--------------------------------------------------------
                            459 ; overlayable items in internal ram 
                            460 ;--------------------------------------------------------
                            461 	.area OSEG    (OVR,DATA)
                            462 ;--------------------------------------------------------
                            463 ; Stack segment in internal ram 
                            464 ;--------------------------------------------------------
                            465 	.area	SSEG	(DATA)
   0000                     466 __start__stack:
   0000                     467 	.ds	1
                            468 
                            469 ;--------------------------------------------------------
                            470 ; indirectly addressable internal ram data
                            471 ;--------------------------------------------------------
                            472 	.area ISEG    (DATA)
                            473 ;--------------------------------------------------------
                            474 ; absolute internal ram data
                            475 ;--------------------------------------------------------
                            476 	.area IABS    (ABS,DATA)
                            477 	.area IABS    (ABS,DATA)
                            478 ;--------------------------------------------------------
                            479 ; bit data
                            480 ;--------------------------------------------------------
                            481 	.area BSEG    (BIT)
                            482 ;--------------------------------------------------------
                            483 ; paged external ram data
                            484 ;--------------------------------------------------------
                            485 	.area PSEG    (PAG,XDATA)
                            486 ;--------------------------------------------------------
                            487 ; external ram data
                            488 ;--------------------------------------------------------
                            489 	.area XSEG    (XDATA)
                    E000    490 _lcd_cmd_wr	=	0xe000
                    E200    491 _lcd_cmd_r	=	0xe200
                    E100    492 _lcd_data_wr	=	0xe100
                    E300    493 _lcd_data_read	=	0xe300
   0000                     494 _i::
   0000                     495 	.ds 2
   0002                     496 _j::
   0002                     497 	.ds 2
   0004                     498 _x::
   0004                     499 	.ds 1
   0005                     500 _x_move::
   0005                     501 	.ds 1
   0006                     502 _y_move::
   0006                     503 	.ds 1
   0007                     504 _createAndStorePacmanCharacters_pacman_forward_1_1:
   0007                     505 	.ds 8
   000F                     506 _createAndStorePacmanCharacters_pacman_reverse_1_1:
   000F                     507 	.ds 8
   0017                     508 _createAndStorePacmanCharacters_pacman_food_1_1:
   0017                     509 	.ds 8
   001F                     510 _main_a_1_1:
   001F                     511 	.ds 2
   0021                     512 _main_timecheck_1_1:
   0021                     513 	.ds 1
   0022                     514 _main_score_1_1:
   0022                     515 	.ds 2
   0024                     516 _main_score_str_3_5:
   0024                     517 	.ds 5
                            518 ;--------------------------------------------------------
                            519 ; absolute external ram data
                            520 ;--------------------------------------------------------
                            521 	.area XABS    (ABS,XDATA)
                            522 ;--------------------------------------------------------
                            523 ; external initialized ram data
                            524 ;--------------------------------------------------------
                            525 	.area XISEG   (XDATA)
   0000                     526 _ch_data::
   0000                     527 	.ds 6
   0006                     528 _xyz_data::
   0006                     529 	.ds 6
   000C                     530 _x_random::
   000C                     531 	.ds 1
   000D                     532 _y_random::
   000D                     533 	.ds 1
   000E                     534 _timeout::
   000E                     535 	.ds 1
   000F                     536 _timerINTcount::
   000F                     537 	.ds 1
                            538 	.area HOME    (CODE)
                            539 	.area GSINIT0 (CODE)
                            540 	.area GSINIT1 (CODE)
                            541 	.area GSINIT2 (CODE)
                            542 	.area GSINIT3 (CODE)
                            543 	.area GSINIT4 (CODE)
                            544 	.area GSINIT5 (CODE)
                            545 	.area GSINIT  (CODE)
                            546 	.area GSFINAL (CODE)
                            547 	.area CSEG    (CODE)
                            548 ;--------------------------------------------------------
                            549 ; interrupt vector 
                            550 ;--------------------------------------------------------
                            551 	.area HOME    (CODE)
   0000                     552 __interrupt_vect:
   0000 02s00r00            553 	ljmp	__sdcc_gsinit_startup
   0003 32                  554 	reti
   0004                     555 	.ds	7
   000B 02s00r20            556 	ljmp	_timer0_isr
                            557 ;--------------------------------------------------------
                            558 ; global & static initialisations
                            559 ;--------------------------------------------------------
                            560 	.area HOME    (CODE)
                            561 	.area GSINIT  (CODE)
                            562 	.area GSFINAL (CODE)
                            563 	.area GSINIT  (CODE)
                            564 	.globl __sdcc_gsinit_startup
                            565 	.globl __sdcc_program_startup
                            566 	.globl __start__stack
                            567 	.globl __mcs51_genXINIT
                            568 	.globl __mcs51_genXRAMCLEAR
                            569 	.globl __mcs51_genRAMCLEAR
                            570 	.area GSFINAL (CODE)
   0000 02s00r0E            571 	ljmp	__sdcc_program_startup
                            572 ;--------------------------------------------------------
                            573 ; Home
                            574 ;--------------------------------------------------------
                            575 	.area HOME    (CODE)
                            576 	.area HOME    (CODE)
   000E                     577 __sdcc_program_startup:
   000E 12s02r00            578 	lcall	_main
                            579 ;	return from main will lock up
   0011 80 FE               580 	sjmp .
                            581 ;--------------------------------------------------------
                            582 ; code
                            583 ;--------------------------------------------------------
                            584 	.area CSEG    (CODE)
                            585 ;------------------------------------------------------------
                            586 ;Allocation info for local variables in function '_sdcc_external_startup'
                            587 ;------------------------------------------------------------
                            588 ;------------------------------------------------------------
                            589 ;	main.c:28: _sdcc_external_startup()
                            590 ;	-----------------------------------------
                            591 ;	 function _sdcc_external_startup
                            592 ;	-----------------------------------------
   0000                     593 __sdcc_external_startup:
                    0002    594 	ar2 = 0x02
                    0003    595 	ar3 = 0x03
                    0004    596 	ar4 = 0x04
                    0005    597 	ar5 = 0x05
                    0006    598 	ar6 = 0x06
                    0007    599 	ar7 = 0x07
                    0000    600 	ar0 = 0x00
                    0001    601 	ar1 = 0x01
                            602 ;	main.c:30: AUXR |= 0X0C ;
   0000 43 8E 0C            603 	orl	_AUXR,#0x0C
                            604 ;	main.c:31: return 0;
   0003 90 00 00            605 	mov	dptr,#0x0000
   0006 22                  606 	ret
                            607 ;------------------------------------------------------------
                            608 ;Allocation info for local variables in function 'timer0Init'
                            609 ;------------------------------------------------------------
                            610 ;------------------------------------------------------------
                            611 ;	main.c:34: void timer0Init()
                            612 ;	-----------------------------------------
                            613 ;	 function timer0Init
                            614 ;	-----------------------------------------
   0007                     615 _timer0Init:
                            616 ;	main.c:36: ET0 = 1;
   0007 D2 A9               617 	setb	_ET0
                            618 ;	main.c:37: EA = 1;
   0009 D2 AF               619 	setb	_EA
                            620 ;	main.c:38: TMOD |= 0x01;           //gating control is set for int0 and timer 0 in mode 1
   000B 43 89 01            621 	orl	_TMOD,#0x01
                            622 ;	main.c:39: TF0 = 0;
   000E C2 8D               623 	clr	_TF0
                            624 ;	main.c:40: TH0 = 0x4B;             //LOAD INITIAL VALUES FOR 50MS delay
   0010 75 8C 4B            625 	mov	_TH0,#0x4B
                            626 ;	main.c:41: TL0 = 0xFD;
   0013 75 8A FD            627 	mov	_TL0,#0xFD
                            628 ;	main.c:42: timerINTcount = 0;
   0016 90s00r0F            629 	mov	dptr,#_timerINTcount
   0019 E4                  630 	clr	a
   001A F0                  631 	movx	@dptr,a
                            632 ;	main.c:43: P1_0 = 0;
   001B C2 90               633 	clr	_P1_0
                            634 ;	main.c:44: TR0 = 1;
   001D D2 8C               635 	setb	_TR0
   001F 22                  636 	ret
                            637 ;------------------------------------------------------------
                            638 ;Allocation info for local variables in function 'timer0_isr'
                            639 ;------------------------------------------------------------
                            640 ;------------------------------------------------------------
                            641 ;	main.c:47: void timer0_isr(void) __critical __interrupt 1  //Timer 0 Interrupt
                            642 ;	-----------------------------------------
                            643 ;	 function timer0_isr
                            644 ;	-----------------------------------------
   0020                     645 _timer0_isr:
   0020 C0*00               646 	push	bits
   0022 C0 E0               647 	push	acc
   0024 C0 F0               648 	push	b
   0026 C0 82               649 	push	dpl
   0028 C0 83               650 	push	dph
   002A C0 02               651 	push	(0+2)
   002C C0 03               652 	push	(0+3)
   002E C0 04               653 	push	(0+4)
   0030 C0 05               654 	push	(0+5)
   0032 C0 06               655 	push	(0+6)
   0034 C0 07               656 	push	(0+7)
   0036 C0 00               657 	push	(0+0)
   0038 C0 01               658 	push	(0+1)
   003A C0 D0               659 	push	psw
   003C 75 D0 00            660 	mov	psw,#0x00
   003F D3                  661 	setb	c
   0040 10 AF 01            662 	jbc	ea,00107$
   0043 C3                  663 	clr	c
   0044                     664 00107$:
   0044 C0 D0               665 	push	psw
                            666 ;	main.c:49: TF0 = 0;
   0046 C2 8D               667 	clr	_TF0
                            668 ;	main.c:50: ET0 = 0;
   0048 C2 A9               669 	clr	_ET0
                            670 ;	main.c:51: TR0=0;
   004A C2 8C               671 	clr	_TR0
                            672 ;	main.c:52: putchar('i');
   004C 75 82 69            673 	mov	dpl,#0x69
   004F 12s00r00            674 	lcall	_putchar
                            675 ;	main.c:53: lcdgotoxy(0,0);
   0052 90s00r00            676 	mov	dptr,#_lcdgotoxy_PARM_2
   0055 E4                  677 	clr	a
   0056 F0                  678 	movx	@dptr,a
   0057 75 82 00            679 	mov	dpl,#0x00
   005A 12s00r00            680 	lcall	_lcdgotoxy
                            681 ;	main.c:54: lcdputch('i');
   005D 75 82 69            682 	mov	dpl,#0x69
   0060 12s00r00            683 	lcall	_lcdputch
                            684 ;	main.c:55: if(timerINTcount < 101)
   0063 90s00r0F            685 	mov	dptr,#_timerINTcount
   0066 E0                  686 	movx	a,@dptr
   0067 FA                  687 	mov	r2,a
   0068 BA 65 00            688 	cjne	r2,#0x65,00108$
   006B                     689 00108$:
   006B 50 2C               690 	jnc	00102$
                            691 ;	main.c:57: putchar('r');
   006D 75 82 72            692 	mov	dpl,#0x72
   0070 12s00r00            693 	lcall	_putchar
                            694 ;	main.c:58: lcdgotoxy(1,0);
   0073 90s00r00            695 	mov	dptr,#_lcdgotoxy_PARM_2
   0076 E4                  696 	clr	a
   0077 F0                  697 	movx	@dptr,a
   0078 75 82 01            698 	mov	dpl,#0x01
   007B 12s00r00            699 	lcall	_lcdgotoxy
                            700 ;	main.c:59: lcdputch('r');
   007E 75 82 72            701 	mov	dpl,#0x72
   0081 12s00r00            702 	lcall	_lcdputch
                            703 ;	main.c:60: P1_0 = 1;
   0084 D2 90               704 	setb	_P1_0
                            705 ;	main.c:61: timerINTcount++;
   0086 90s00r0F            706 	mov	dptr,#_timerINTcount
   0089 E0                  707 	movx	a,@dptr
   008A 24 01               708 	add	a,#0x01
   008C F0                  709 	movx	@dptr,a
                            710 ;	main.c:62: TH0 = 0x4B;             //LOAD INITIAL VALUES FOR 50MS delay
   008D 75 8C 4B            711 	mov	_TH0,#0x4B
                            712 ;	main.c:63: TL0 = 0xFD;
   0090 75 8A FD            713 	mov	_TL0,#0xFD
                            714 ;	main.c:64: TR0=1;
   0093 D2 8C               715 	setb	_TR0
                            716 ;	main.c:65: ET0 = 1;
   0095 D2 A9               717 	setb	_ET0
   0097 80 2E               718 	sjmp	00104$
   0099                     719 00102$:
                            720 ;	main.c:69: putchar('t');
   0099 75 82 74            721 	mov	dpl,#0x74
   009C 12s00r00            722 	lcall	_putchar
                            723 ;	main.c:70: lcdgotoxy(2,0);
   009F 90s00r00            724 	mov	dptr,#_lcdgotoxy_PARM_2
   00A2 E4                  725 	clr	a
   00A3 F0                  726 	movx	@dptr,a
   00A4 75 82 02            727 	mov	dpl,#0x02
   00A7 12s00r00            728 	lcall	_lcdgotoxy
                            729 ;	main.c:71: lcdputch('t');
   00AA 75 82 74            730 	mov	dpl,#0x74
   00AD 12s00r00            731 	lcall	_lcdputch
                            732 ;	main.c:72: P1_0 = 0;
   00B0 C2 90               733 	clr	_P1_0
                            734 ;	main.c:73: timeout = 1;
   00B2 90s00r0E            735 	mov	dptr,#_timeout
   00B5 74 01               736 	mov	a,#0x01
   00B7 F0                  737 	movx	@dptr,a
                            738 ;	main.c:74: timerINTcount = 0;
   00B8 90s00r0F            739 	mov	dptr,#_timerINTcount
   00BB E4                  740 	clr	a
   00BC F0                  741 	movx	@dptr,a
                            742 ;	main.c:75: TH0 = 0x4B;             //LOAD INITIAL VALUES FOR 50MS delay
   00BD 75 8C 4B            743 	mov	_TH0,#0x4B
                            744 ;	main.c:76: TL0 = 0xFD;
   00C0 75 8A FD            745 	mov	_TL0,#0xFD
                            746 ;	main.c:77: TR0=0;
   00C3 C2 8C               747 	clr	_TR0
                            748 ;	main.c:78: ET0 = 1;
   00C5 D2 A9               749 	setb	_ET0
   00C7                     750 00104$:
   00C7 D0 D0               751 	pop	psw
   00C9 92 AF               752 	mov	ea,c
   00CB D0 D0               753 	pop	psw
   00CD D0 01               754 	pop	(0+1)
   00CF D0 00               755 	pop	(0+0)
   00D1 D0 07               756 	pop	(0+7)
   00D3 D0 06               757 	pop	(0+6)
   00D5 D0 05               758 	pop	(0+5)
   00D7 D0 04               759 	pop	(0+4)
   00D9 D0 03               760 	pop	(0+3)
   00DB D0 02               761 	pop	(0+2)
   00DD D0 83               762 	pop	dph
   00DF D0 82               763 	pop	dpl
   00E1 D0 F0               764 	pop	b
   00E3 D0 E0               765 	pop	acc
   00E5 D0*00               766 	pop	bits
   00E7 32                  767 	reti
                            768 ;------------------------------------------------------------
                            769 ;Allocation info for local variables in function 'createAndStorePacmanCharacters'
                            770 ;------------------------------------------------------------
                            771 ;pacman_forward            Allocated with name '_createAndStorePacmanCharacters_pacman_forward_1_1'
                            772 ;pacman_reverse            Allocated with name '_createAndStorePacmanCharacters_pacman_reverse_1_1'
                            773 ;pacman_food               Allocated with name '_createAndStorePacmanCharacters_pacman_food_1_1'
                            774 ;------------------------------------------------------------
                            775 ;	main.c:83: void createAndStorePacmanCharacters()   //function for pacman custom characters
                            776 ;	-----------------------------------------
                            777 ;	 function createAndStorePacmanCharacters
                            778 ;	-----------------------------------------
   00E8                     779 _createAndStorePacmanCharacters:
                            780 ;	main.c:85: unsigned char pacman_forward[8] = {0x0E,0x1D ,0x1F,0x1C,0x18,0x1C,0x1F,0x0E};
   00E8 90s00r07            781 	mov	dptr,#_createAndStorePacmanCharacters_pacman_forward_1_1
   00EB 74 0E               782 	mov	a,#0x0E
   00ED F0                  783 	movx	@dptr,a
   00EE 90s00r08            784 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_forward_1_1 + 0x0001)
   00F1 74 1D               785 	mov	a,#0x1D
   00F3 F0                  786 	movx	@dptr,a
   00F4 90s00r09            787 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_forward_1_1 + 0x0002)
   00F7 74 1F               788 	mov	a,#0x1F
   00F9 F0                  789 	movx	@dptr,a
   00FA 90s00r0A            790 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_forward_1_1 + 0x0003)
   00FD 74 1C               791 	mov	a,#0x1C
   00FF F0                  792 	movx	@dptr,a
   0100 90s00r0B            793 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_forward_1_1 + 0x0004)
   0103 74 18               794 	mov	a,#0x18
   0105 F0                  795 	movx	@dptr,a
   0106 90s00r0C            796 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_forward_1_1 + 0x0005)
   0109 74 1C               797 	mov	a,#0x1C
   010B F0                  798 	movx	@dptr,a
   010C 90s00r0D            799 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_forward_1_1 + 0x0006)
   010F 74 1F               800 	mov	a,#0x1F
   0111 F0                  801 	movx	@dptr,a
   0112 90s00r0E            802 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_forward_1_1 + 0x0007)
   0115 74 0E               803 	mov	a,#0x0E
   0117 F0                  804 	movx	@dptr,a
                            805 ;	main.c:86: unsigned char pacman_reverse[8] = {0x0E,0x17,0x1F,0x07,0x03,0x07,0x1F,0x0E};
   0118 90s00r0F            806 	mov	dptr,#_createAndStorePacmanCharacters_pacman_reverse_1_1
   011B 74 0E               807 	mov	a,#0x0E
   011D F0                  808 	movx	@dptr,a
   011E 90s00r10            809 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_reverse_1_1 + 0x0001)
   0121 74 17               810 	mov	a,#0x17
   0123 F0                  811 	movx	@dptr,a
   0124 90s00r11            812 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_reverse_1_1 + 0x0002)
   0127 74 1F               813 	mov	a,#0x1F
   0129 F0                  814 	movx	@dptr,a
   012A 90s00r12            815 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_reverse_1_1 + 0x0003)
   012D 74 07               816 	mov	a,#0x07
   012F F0                  817 	movx	@dptr,a
   0130 90s00r13            818 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_reverse_1_1 + 0x0004)
   0133 74 03               819 	mov	a,#0x03
   0135 F0                  820 	movx	@dptr,a
   0136 90s00r14            821 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_reverse_1_1 + 0x0005)
   0139 74 07               822 	mov	a,#0x07
   013B F0                  823 	movx	@dptr,a
   013C 90s00r15            824 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_reverse_1_1 + 0x0006)
   013F 74 1F               825 	mov	a,#0x1F
   0141 F0                  826 	movx	@dptr,a
   0142 90s00r16            827 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_reverse_1_1 + 0x0007)
   0145 74 0E               828 	mov	a,#0x0E
   0147 F0                  829 	movx	@dptr,a
                            830 ;	main.c:87: unsigned char pacman_food[8]    = {0x0E,0x1F,0x15,0x1F,0x1F,0x1F,0x15,0x15};
   0148 90s00r17            831 	mov	dptr,#_createAndStorePacmanCharacters_pacman_food_1_1
   014B 74 0E               832 	mov	a,#0x0E
   014D F0                  833 	movx	@dptr,a
   014E 90s00r18            834 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_food_1_1 + 0x0001)
   0151 74 1F               835 	mov	a,#0x1F
   0153 F0                  836 	movx	@dptr,a
   0154 90s00r19            837 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_food_1_1 + 0x0002)
   0157 74 15               838 	mov	a,#0x15
   0159 F0                  839 	movx	@dptr,a
   015A 90s00r1A            840 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_food_1_1 + 0x0003)
   015D 74 1F               841 	mov	a,#0x1F
   015F F0                  842 	movx	@dptr,a
   0160 90s00r1B            843 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_food_1_1 + 0x0004)
   0163 74 1F               844 	mov	a,#0x1F
   0165 F0                  845 	movx	@dptr,a
   0166 90s00r1C            846 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_food_1_1 + 0x0005)
   0169 74 1F               847 	mov	a,#0x1F
   016B F0                  848 	movx	@dptr,a
   016C 90s00r1D            849 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_food_1_1 + 0x0006)
   016F 74 15               850 	mov	a,#0x15
   0171 F0                  851 	movx	@dptr,a
   0172 90s00r1E            852 	mov	dptr,#(_createAndStorePacmanCharacters_pacman_food_1_1 + 0x0007)
   0175 74 15               853 	mov	a,#0x15
   0177 F0                  854 	movx	@dptr,a
                            855 ;	main.c:88: lcdcreatechar(CG_CHAR_CODE_PACMAN_FORWARD,pacman_forward);
   0178 90s00r00            856 	mov	dptr,#_lcdcreatechar_PARM_2
   017B 74r07               857 	mov	a,#_createAndStorePacmanCharacters_pacman_forward_1_1
   017D F0                  858 	movx	@dptr,a
   017E A3                  859 	inc	dptr
   017F 74s00               860 	mov	a,#(_createAndStorePacmanCharacters_pacman_forward_1_1 >> 8)
   0181 F0                  861 	movx	@dptr,a
   0182 A3                  862 	inc	dptr
   0183 E4                  863 	clr	a
   0184 F0                  864 	movx	@dptr,a
   0185 75 82 00            865 	mov	dpl,#0x00
   0188 12s00r00            866 	lcall	_lcdcreatechar
                            867 ;	main.c:89: lcdcreatechar(CG_CHAR_CODE_PACMAN_REVERSE,pacman_reverse);
   018B 90s00r00            868 	mov	dptr,#_lcdcreatechar_PARM_2
   018E 74r0F               869 	mov	a,#_createAndStorePacmanCharacters_pacman_reverse_1_1
   0190 F0                  870 	movx	@dptr,a
   0191 A3                  871 	inc	dptr
   0192 74s00               872 	mov	a,#(_createAndStorePacmanCharacters_pacman_reverse_1_1 >> 8)
   0194 F0                  873 	movx	@dptr,a
   0195 A3                  874 	inc	dptr
   0196 E4                  875 	clr	a
   0197 F0                  876 	movx	@dptr,a
   0198 75 82 01            877 	mov	dpl,#0x01
   019B 12s00r00            878 	lcall	_lcdcreatechar
                            879 ;	main.c:90: lcdcreatechar(CG_CHAR_CODE_PACMAN_FOOD,pacman_food);
   019E 90s00r00            880 	mov	dptr,#_lcdcreatechar_PARM_2
   01A1 74r17               881 	mov	a,#_createAndStorePacmanCharacters_pacman_food_1_1
   01A3 F0                  882 	movx	@dptr,a
   01A4 A3                  883 	inc	dptr
   01A5 74s00               884 	mov	a,#(_createAndStorePacmanCharacters_pacman_food_1_1 >> 8)
   01A7 F0                  885 	movx	@dptr,a
   01A8 A3                  886 	inc	dptr
   01A9 E4                  887 	clr	a
   01AA F0                  888 	movx	@dptr,a
   01AB 75 82 02            889 	mov	dpl,#0x02
   01AE 02s00r00            890 	ljmp	_lcdcreatechar
                            891 ;------------------------------------------------------------
                            892 ;Allocation info for local variables in function 'putRandom'
                            893 ;------------------------------------------------------------
                            894 ;------------------------------------------------------------
                            895 ;	main.c:93: void putRandom()   // function to generate food in random locations using rand and srand
                            896 ;	-----------------------------------------
                            897 ;	 function putRandom
                            898 ;	-----------------------------------------
   01B1                     899 _putRandom:
                            900 ;	main.c:95: x_random = (char)(rand()%16);       //%16 to get rand value in 0-15 range
   01B1 12s00r00            901 	lcall	_rand
   01B4 AA 82               902 	mov	r2,dpl
   01B6 AB 83               903 	mov	r3,dph
   01B8 90s00r00            904 	mov	dptr,#__modsint_PARM_2
   01BB 74 10               905 	mov	a,#0x10
   01BD F0                  906 	movx	@dptr,a
   01BE A3                  907 	inc	dptr
   01BF E4                  908 	clr	a
   01C0 F0                  909 	movx	@dptr,a
   01C1 8A 82               910 	mov	dpl,r2
   01C3 8B 83               911 	mov	dph,r3
   01C5 12s00r00            912 	lcall	__modsint
   01C8 AA 82               913 	mov	r2,dpl
   01CA 90s00r0C            914 	mov	dptr,#_x_random
   01CD EA                  915 	mov	a,r2
   01CE F0                  916 	movx	@dptr,a
                            917 ;	main.c:96: y_random = (char)(rand()%4);        //%4 to get rand value in 0-3 range
   01CF 12s00r00            918 	lcall	_rand
   01D2 AA 82               919 	mov	r2,dpl
   01D4 AB 83               920 	mov	r3,dph
   01D6 90s00r00            921 	mov	dptr,#__modsint_PARM_2
   01D9 74 04               922 	mov	a,#0x04
   01DB F0                  923 	movx	@dptr,a
   01DC A3                  924 	inc	dptr
   01DD E4                  925 	clr	a
   01DE F0                  926 	movx	@dptr,a
   01DF 8A 82               927 	mov	dpl,r2
   01E1 8B 83               928 	mov	dph,r3
   01E3 12s00r00            929 	lcall	__modsint
   01E6 AA 82               930 	mov	r2,dpl
   01E8 90s00r0D            931 	mov	dptr,#_y_random
   01EB EA                  932 	mov	a,r2
   01EC F0                  933 	movx	@dptr,a
                            934 ;	main.c:97: lcdgotoxy(y_random,x_random);
   01ED 90s00r0C            935 	mov	dptr,#_x_random
   01F0 E0                  936 	movx	a,@dptr
   01F1 90s00r00            937 	mov	dptr,#_lcdgotoxy_PARM_2
   01F4 F0                  938 	movx	@dptr,a
   01F5 8A 82               939 	mov	dpl,r2
   01F7 12s00r00            940 	lcall	_lcdgotoxy
                            941 ;	main.c:99: LCD_print_CG(CG_CHAR_CODE_PACMAN_FOOD);
   01FA 75 82 02            942 	mov	dpl,#0x02
   01FD 02s00r00            943 	ljmp	_LCD_print_CG
                            944 ;------------------------------------------------------------
                            945 ;Allocation info for local variables in function 'main'
                            946 ;------------------------------------------------------------
                            947 ;a                         Allocated with name '_main_a_1_1'
                            948 ;timecheck                 Allocated with name '_main_timecheck_1_1'
                            949 ;score                     Allocated with name '_main_score_1_1'
                            950 ;score_str                 Allocated with name '_main_score_str_3_5'
                            951 ;------------------------------------------------------------
                            952 ;	main.c:102: void main(void)
                            953 ;	-----------------------------------------
                            954 ;	 function main
                            955 ;	-----------------------------------------
   0200                     956 _main:
                            957 ;	main.c:104: int a = 0;
   0200 90s00r1F            958 	mov	dptr,#_main_a_1_1
   0203 E4                  959 	clr	a
   0204 F0                  960 	movx	@dptr,a
   0205 A3                  961 	inc	dptr
   0206 F0                  962 	movx	@dptr,a
                            963 ;	main.c:105: unsigned char timecheck = 0;  // flag to check game over condition
   0207 90s00r21            964 	mov	dptr,#_main_timecheck_1_1
   020A E4                  965 	clr	a
   020B F0                  966 	movx	@dptr,a
                            967 ;	main.c:107: serial_init();              // calling serial initialisation
   020C 12s00r00            968 	lcall	_serial_init
                            969 ;	main.c:108: lcdinit();                  // lcd initialisation function
   020F 12s00r00            970 	lcall	_lcdinit
                            971 ;	main.c:110: createAndStorePacmanCharacters();   // display pacman characters on screen
   0212 12s00rE8            972 	lcall	_createAndStorePacmanCharacters
                            973 ;	main.c:111: putstr("Game init\r\n");
   0215 90s00r00            974 	mov	dptr,#__str_0
   0218 75 F0 80            975 	mov	b,#0x80
   021B 12s00r00            976 	lcall	_putstr
                            977 ;	main.c:112: lcdgotoxy(0,0);
   021E 90s00r00            978 	mov	dptr,#_lcdgotoxy_PARM_2
   0221 E4                  979 	clr	a
   0222 F0                  980 	movx	@dptr,a
   0223 75 82 00            981 	mov	dpl,#0x00
   0226 12s00r00            982 	lcall	_lcdgotoxy
                            983 ;	main.c:113: lcdputstr("* * * * * * * *");
   0229 90s00r0C            984 	mov	dptr,#__str_1
   022C 75 F0 80            985 	mov	b,#0x80
   022F 12s00r00            986 	lcall	_lcdputstr
                            987 ;	main.c:114: lcdgotoxy(1,0);
   0232 90s00r00            988 	mov	dptr,#_lcdgotoxy_PARM_2
   0235 E4                  989 	clr	a
   0236 F0                  990 	movx	@dptr,a
   0237 75 82 01            991 	mov	dpl,#0x01
   023A 12s00r00            992 	lcall	_lcdgotoxy
                            993 ;	main.c:115: lcdputstr("   PAC   MAN   ");
   023D 90s00r1C            994 	mov	dptr,#__str_2
   0240 75 F0 80            995 	mov	b,#0x80
   0243 12s00r00            996 	lcall	_lcdputstr
                            997 ;	main.c:116: lcdgotoxy(2,0);
   0246 90s00r00            998 	mov	dptr,#_lcdgotoxy_PARM_2
   0249 E4                  999 	clr	a
   024A F0                 1000 	movx	@dptr,a
   024B 75 82 02           1001 	mov	dpl,#0x02
   024E 12s00r00           1002 	lcall	_lcdgotoxy
                           1003 ;	main.c:117: lcdputstr("  PRESS RESET  ");
   0251 90s00r2C           1004 	mov	dptr,#__str_3
   0254 75 F0 80           1005 	mov	b,#0x80
   0257 12s00r00           1006 	lcall	_lcdputstr
                           1007 ;	main.c:118: lcdgotoxy(3,0);
   025A 90s00r00           1008 	mov	dptr,#_lcdgotoxy_PARM_2
   025D E4                 1009 	clr	a
   025E F0                 1010 	movx	@dptr,a
   025F 75 82 03           1011 	mov	dpl,#0x03
   0262 12s00r00           1012 	lcall	_lcdgotoxy
                           1013 ;	main.c:119: lcdputstr("ON MSP TO START");
   0265 90s00r3C           1014 	mov	dptr,#__str_4
   0268 75 F0 80           1015 	mov	b,#0x80
   026B 12s00r00           1016 	lcall	_lcdputstr
                           1017 ;	main.c:120: lcdgotoxy(1,0);
   026E 90s00r00           1018 	mov	dptr,#_lcdgotoxy_PARM_2
   0271 E4                 1019 	clr	a
   0272 F0                 1020 	movx	@dptr,a
   0273 75 82 01           1021 	mov	dpl,#0x01
   0276 12s00r00           1022 	lcall	_lcdgotoxy
                           1023 ;	main.c:121: LCD_print_CG(CG_CHAR_CODE_PACMAN_FORWARD);
   0279 75 82 00           1024 	mov	dpl,#0x00
   027C 12s00r00           1025 	lcall	_LCD_print_CG
                           1026 ;	main.c:122: lcdgotoxy(1,15);
   027F 90s00r00           1027 	mov	dptr,#_lcdgotoxy_PARM_2
   0282 74 0F              1028 	mov	a,#0x0F
   0284 F0                 1029 	movx	@dptr,a
   0285 75 82 01           1030 	mov	dpl,#0x01
   0288 12s00r00           1031 	lcall	_lcdgotoxy
                           1032 ;	main.c:123: LCD_print_CG(CG_CHAR_CODE_PACMAN_REVERSE);
   028B 75 82 01           1033 	mov	dpl,#0x01
   028E 12s00r00           1034 	lcall	_LCD_print_CG
                           1035 ;	main.c:124: lcdgotoxy(1,7);
   0291 90s00r00           1036 	mov	dptr,#_lcdgotoxy_PARM_2
   0294 74 07              1037 	mov	a,#0x07
   0296 F0                 1038 	movx	@dptr,a
   0297 75 82 01           1039 	mov	dpl,#0x01
   029A 12s00r00           1040 	lcall	_lcdgotoxy
                           1041 ;	main.c:125: LCD_print_CG(CG_CHAR_CODE_PACMAN_FOOD);
   029D 75 82 02           1042 	mov	dpl,#0x02
   02A0 12s00r00           1043 	lcall	_LCD_print_CG
                           1044 ;	main.c:127: RESTART_GAME:
   02A3                    1045 00101$:
                           1046 ;	main.c:128: P1_4 = 0;   // restart led connected to p1_4
   02A3 C2 94              1047 	clr	_P1_4
                           1048 ;	main.c:130: while(RI==0)
   02A5 90s00r1F           1049 	mov	dptr,#_main_a_1_1
   02A8 E0                 1050 	movx	a,@dptr
   02A9 FA                 1051 	mov	r2,a
   02AA A3                 1052 	inc	dptr
   02AB E0                 1053 	movx	a,@dptr
   02AC FB                 1054 	mov	r3,a
   02AD                    1055 00102$:
   02AD 20 98 0F           1056 	jb	_RI,00104$
                           1057 ;	main.c:132: a++;    //trying to generating a random seed while waiting for the game to start
   02B0 0A                 1058 	inc	r2
   02B1 BA 00 01           1059 	cjne	r2,#0x00,00188$
   02B4 0B                 1060 	inc	r3
   02B5                    1061 00188$:
   02B5 90s00r1F           1062 	mov	dptr,#_main_a_1_1
   02B8 EA                 1063 	mov	a,r2
   02B9 F0                 1064 	movx	@dptr,a
   02BA A3                 1065 	inc	dptr
   02BB EB                 1066 	mov	a,r3
   02BC F0                 1067 	movx	@dptr,a
   02BD 80 EE              1068 	sjmp	00102$
   02BF                    1069 00104$:
                           1070 ;	main.c:134: RI = 0;
   02BF C2 98              1071 	clr	_RI
                           1072 ;	main.c:135: x=SBUF;  // get serial value in sbuf
   02C1 AC 99              1073 	mov	r4,_SBUF
   02C3 90s00r04           1074 	mov	dptr,#_x
   02C6 EC                 1075 	mov	a,r4
   02C7 F0                 1076 	movx	@dptr,a
                           1077 ;	main.c:136: }while(x != '*'); // as per msp program a'*' is sent on reset button press
   02C8 BC 2A E2           1078 	cjne	r4,#0x2A,00102$
                           1079 ;	main.c:137: x=SBUF;
   02CB 90s00r1F           1080 	mov	dptr,#_main_a_1_1
   02CE EA                 1081 	mov	a,r2
   02CF F0                 1082 	movx	@dptr,a
   02D0 A3                 1083 	inc	dptr
   02D1 EB                 1084 	mov	a,r3
   02D2 F0                 1085 	movx	@dptr,a
   02D3 90s00r04           1086 	mov	dptr,#_x
   02D6 E5 99              1087 	mov	a,_SBUF
   02D8 F0                 1088 	movx	@dptr,a
                           1089 ;	main.c:138: P1_4 = 1;  // light up the led
   02D9 D2 94              1090 	setb	_P1_4
                           1091 ;	main.c:141: x_move = 7;                 // to move it to default reset position
   02DB 90s00r05           1092 	mov	dptr,#_x_move
   02DE 74 07              1093 	mov	a,#0x07
   02E0 F0                 1094 	movx	@dptr,a
                           1095 ;	main.c:142: y_move = 2;                 // to move it to default reset position
   02E1 90s00r06           1096 	mov	dptr,#_y_move
   02E4 74 02              1097 	mov	a,#0x02
   02E6 F0                 1098 	movx	@dptr,a
                           1099 ;	main.c:143: lcdclear(); // clear lcd
   02E7 C0 02              1100 	push	ar2
   02E9 C0 03              1101 	push	ar3
   02EB 12s00r00           1102 	lcall	_lcdclear
                           1103 ;	main.c:144: lcdgotoxy(y_move,x_move);  // go to default reset position
   02EE 90s00r06           1104 	mov	dptr,#_y_move
   02F1 E0                 1105 	movx	a,@dptr
   02F2 FC                 1106 	mov	r4,a
   02F3 90s00r05           1107 	mov	dptr,#_x_move
   02F6 E0                 1108 	movx	a,@dptr
   02F7 90s00r00           1109 	mov	dptr,#_lcdgotoxy_PARM_2
   02FA F0                 1110 	movx	@dptr,a
   02FB 8C 82              1111 	mov	dpl,r4
   02FD 12s00r00           1112 	lcall	_lcdgotoxy
                           1113 ;	main.c:146: LCD_print_CG(CG_CHAR_CODE_PACMAN_FORWARD); // print pacman forward
   0300 75 82 00           1114 	mov	dpl,#0x00
   0303 12s00r00           1115 	lcall	_LCD_print_CG
   0306 D0 03              1116 	pop	ar3
   0308 D0 02              1117 	pop	ar2
                           1118 ;	main.c:148: srand(a);  // function to generate a random number seed
   030A 8A 82              1119 	mov	dpl,r2
   030C 8B 83              1120 	mov	dph,r3
   030E 12s00r00           1121 	lcall	_srand
                           1122 ;	main.c:149: putRandom(); //function to put the food in random locations
   0311 12s01rB1           1123 	lcall	_putRandom
                           1124 ;	main.c:150: score = 0;
   0314 90s00r22           1125 	mov	dptr,#_main_score_1_1
   0317 E4                 1126 	clr	a
   0318 F0                 1127 	movx	@dptr,a
   0319 A3                 1128 	inc	dptr
   031A F0                 1129 	movx	@dptr,a
                           1130 ;	main.c:152: timer0Init();
   031B 12s00r07           1131 	lcall	_timer0Init
                           1132 ;	main.c:154: putstr("Timer started\r\n");
   031E 90s00r4C           1133 	mov	dptr,#__str_5
   0321 75 F0 80           1134 	mov	b,#0x80
   0324 12s00r00           1135 	lcall	_putstr
                           1136 ;	main.c:155: while(1)
   0327                    1137 00146$:
                           1138 ;	main.c:157: if(timeout || (timecheck >25))  // if timer runs out of time 5 secs of no activity timeout flag is set
   0327 90s00r0E           1139 	mov	dptr,#_timeout
   032A E0                 1140 	movx	a,@dptr
   032B FA                 1141 	mov	r2,a
   032C 70 0F              1142 	jnz	00108$
   032E 90s00r21           1143 	mov	dptr,#_main_timecheck_1_1
   0331 E0                 1144 	movx	a,@dptr
   0332 FA                 1145 	mov	r2,a
   0333 74 19              1146 	mov	a,#0x19
   0335 B5 02 00           1147 	cjne	a,ar2,00192$
   0338                    1148 00192$:
   0338 40 03              1149 	jc	00193$
   033A 02s04r1D           1150 	ljmp	00109$
   033D                    1151 00193$:
   033D                    1152 00108$:
                           1153 ;	main.c:159: char score_str[5] = {0};
   033D 90s00r24           1154 	mov	dptr,#_main_score_str_3_5
   0340 E4                 1155 	clr	a
   0341 F0                 1156 	movx	@dptr,a
   0342 90s00r25           1157 	mov	dptr,#(_main_score_str_3_5 + 0x0001)
   0345 F0                 1158 	movx	@dptr,a
   0346 90s00r26           1159 	mov	dptr,#(_main_score_str_3_5 + 0x0002)
   0349 F0                 1160 	movx	@dptr,a
   034A 90s00r27           1161 	mov	dptr,#(_main_score_str_3_5 + 0x0003)
   034D F0                 1162 	movx	@dptr,a
   034E 90s00r28           1163 	mov	dptr,#(_main_score_str_3_5 + 0x0004)
                           1164 ;	main.c:160: timecheck = 0;
                           1165 ;	main.c:162: timerINTcount = 0;
                           1166 ;	main.c:163: timeout = 0;
   0351 E4                 1167 	clr	a
   0352 F0                 1168 	movx	@dptr,a
   0353 90s00r21           1169 	mov	dptr,#_main_timecheck_1_1
   0356 F0                 1170 	movx	@dptr,a
   0357 90s00r0F           1171 	mov	dptr,#_timerINTcount
   035A F0                 1172 	movx	@dptr,a
   035B 90s00r0E           1173 	mov	dptr,#_timeout
   035E F0                 1174 	movx	@dptr,a
                           1175 ;	main.c:164: lcdclear();
   035F 12s00r00           1176 	lcall	_lcdclear
                           1177 ;	main.c:165: lcdgotoxy(0,0);
   0362 90s00r00           1178 	mov	dptr,#_lcdgotoxy_PARM_2
   0365 E4                 1179 	clr	a
   0366 F0                 1180 	movx	@dptr,a
   0367 75 82 00           1181 	mov	dpl,#0x00
   036A 12s00r00           1182 	lcall	_lcdgotoxy
                           1183 ;	main.c:166: lcdputstr("** GAME  OVER **");
   036D 90s00r5C           1184 	mov	dptr,#__str_6
   0370 75 F0 80           1185 	mov	b,#0x80
   0373 12s00r00           1186 	lcall	_lcdputstr
                           1187 ;	main.c:167: lcdgotoxy(1,0);
   0376 90s00r00           1188 	mov	dptr,#_lcdgotoxy_PARM_2
   0379 E4                 1189 	clr	a
   037A F0                 1190 	movx	@dptr,a
   037B 75 82 01           1191 	mov	dpl,#0x01
   037E 12s00r00           1192 	lcall	_lcdgotoxy
                           1193 ;	main.c:168: lcdputstr("   PAC   MAN   ");
   0381 90s00r1C           1194 	mov	dptr,#__str_2
   0384 75 F0 80           1195 	mov	b,#0x80
   0387 12s00r00           1196 	lcall	_lcdputstr
                           1197 ;	main.c:169: lcdgotoxy(2,0);
   038A 90s00r00           1198 	mov	dptr,#_lcdgotoxy_PARM_2
   038D E4                 1199 	clr	a
   038E F0                 1200 	movx	@dptr,a
   038F 75 82 02           1201 	mov	dpl,#0x02
   0392 12s00r00           1202 	lcall	_lcdgotoxy
                           1203 ;	main.c:170: lcdputstr("  SCORE:");
   0395 90s00r6D           1204 	mov	dptr,#__str_7
   0398 75 F0 80           1205 	mov	b,#0x80
   039B 12s00r00           1206 	lcall	_lcdputstr
                           1207 ;	main.c:171: sprintf(score_str,"%d",score);
   039E 90s00r22           1208 	mov	dptr,#_main_score_1_1
   03A1 E0                 1209 	movx	a,@dptr
   03A2 C0 E0              1210 	push	acc
   03A4 A3                 1211 	inc	dptr
   03A5 E0                 1212 	movx	a,@dptr
   03A6 C0 E0              1213 	push	acc
   03A8 74r76              1214 	mov	a,#__str_8
   03AA C0 E0              1215 	push	acc
   03AC 74s00              1216 	mov	a,#(__str_8 >> 8)
   03AE C0 E0              1217 	push	acc
   03B0 74 80              1218 	mov	a,#0x80
   03B2 C0 E0              1219 	push	acc
   03B4 74r24              1220 	mov	a,#_main_score_str_3_5
   03B6 C0 E0              1221 	push	acc
   03B8 74s00              1222 	mov	a,#(_main_score_str_3_5 >> 8)
   03BA C0 E0              1223 	push	acc
   03BC E4                 1224 	clr	a
   03BD C0 E0              1225 	push	acc
   03BF 12s00r00           1226 	lcall	_sprintf
   03C2 E5 81              1227 	mov	a,sp
   03C4 24 F8              1228 	add	a,#0xf8
   03C6 F5 81              1229 	mov	sp,a
                           1230 ;	main.c:172: lcdputstr(score_str);
   03C8 90s00r24           1231 	mov	dptr,#_main_score_str_3_5
   03CB 75 F0 00           1232 	mov	b,#0x00
   03CE 12s00r00           1233 	lcall	_lcdputstr
                           1234 ;	main.c:173: lcdgotoxy(3,0);
   03D1 90s00r00           1235 	mov	dptr,#_lcdgotoxy_PARM_2
   03D4 E4                 1236 	clr	a
   03D5 F0                 1237 	movx	@dptr,a
   03D6 75 82 03           1238 	mov	dpl,#0x03
   03D9 12s00r00           1239 	lcall	_lcdgotoxy
                           1240 ;	main.c:174: lcdputstr("PRESS MSP RESET");
   03DC 90s00r79           1241 	mov	dptr,#__str_9
   03DF 75 F0 80           1242 	mov	b,#0x80
   03E2 12s00r00           1243 	lcall	_lcdputstr
                           1244 ;	main.c:175: lcdgotoxy(1,0);
   03E5 90s00r00           1245 	mov	dptr,#_lcdgotoxy_PARM_2
   03E8 E4                 1246 	clr	a
   03E9 F0                 1247 	movx	@dptr,a
   03EA 75 82 01           1248 	mov	dpl,#0x01
   03ED 12s00r00           1249 	lcall	_lcdgotoxy
                           1250 ;	main.c:176: LCD_print_CG(CG_CHAR_CODE_PACMAN_FORWARD);
   03F0 75 82 00           1251 	mov	dpl,#0x00
   03F3 12s00r00           1252 	lcall	_LCD_print_CG
                           1253 ;	main.c:177: lcdgotoxy(1,15);
   03F6 90s00r00           1254 	mov	dptr,#_lcdgotoxy_PARM_2
   03F9 74 0F              1255 	mov	a,#0x0F
   03FB F0                 1256 	movx	@dptr,a
   03FC 75 82 01           1257 	mov	dpl,#0x01
   03FF 12s00r00           1258 	lcall	_lcdgotoxy
                           1259 ;	main.c:178: LCD_print_CG(CG_CHAR_CODE_PACMAN_REVERSE);
   0402 75 82 01           1260 	mov	dpl,#0x01
   0405 12s00r00           1261 	lcall	_LCD_print_CG
                           1262 ;	main.c:179: lcdgotoxy(1,7);
   0408 90s00r00           1263 	mov	dptr,#_lcdgotoxy_PARM_2
   040B 74 07              1264 	mov	a,#0x07
   040D F0                 1265 	movx	@dptr,a
   040E 75 82 01           1266 	mov	dpl,#0x01
   0411 12s00r00           1267 	lcall	_lcdgotoxy
                           1268 ;	main.c:180: LCD_print_CG(CG_CHAR_CODE_PACMAN_FOOD);
   0414 75 82 02           1269 	mov	dpl,#0x02
   0417 12s00r00           1270 	lcall	_LCD_print_CG
                           1271 ;	main.c:181: goto RESTART_GAME;
   041A 02s02rA3           1272 	ljmp	00101$
   041D                    1273 00109$:
                           1274 ;	main.c:185: j= 0;
   041D 90s00r02           1275 	mov	dptr,#_j
   0420 E4                 1276 	clr	a
   0421 F0                 1277 	movx	@dptr,a
   0422 A3                 1278 	inc	dptr
   0423 F0                 1279 	movx	@dptr,a
                           1280 ;	main.c:186: do
   0424                    1281 00118$:
                           1282 ;	main.c:188: i = 0;
   0424 90s00r00           1283 	mov	dptr,#_i
   0427 E4                 1284 	clr	a
   0428 F0                 1285 	movx	@dptr,a
   0429 A3                 1286 	inc	dptr
   042A F0                 1287 	movx	@dptr,a
                           1288 ;	main.c:191: while(RI==0);
   042B                    1289 00111$:
                           1290 ;	main.c:192: RI = 0;
   042B 10 98 02           1291 	jbc	_RI,00194$
   042E 80 FB              1292 	sjmp	00111$
   0430                    1293 00194$:
                           1294 ;	main.c:193: x=SBUF;
   0430 AA 99              1295 	mov	r2,_SBUF
   0432 90s00r04           1296 	mov	dptr,#_x
   0435 EA                 1297 	mov	a,r2
   0436 F0                 1298 	movx	@dptr,a
                           1299 ;	main.c:194: putchar(x); //used for debug and testing purpose from the terminal
   0437 8A 82              1300 	mov	dpl,r2
   0439 12s00r00           1301 	lcall	_putchar
                           1302 ;	main.c:195: ch_data[i]= x;
   043C 90s00r00           1303 	mov	dptr,#_i
   043F E0                 1304 	movx	a,@dptr
   0440 FA                 1305 	mov	r2,a
   0441 A3                 1306 	inc	dptr
   0442 E0                 1307 	movx	a,@dptr
   0443 FB                 1308 	mov	r3,a
   0444 EA                 1309 	mov	a,r2
   0445 24r00              1310 	add	a,#_ch_data
   0447 FC                 1311 	mov	r4,a
   0448 EB                 1312 	mov	a,r3
   0449 34s00              1313 	addc	a,#(_ch_data >> 8)
   044B FD                 1314 	mov	r5,a
   044C 90s00r04           1315 	mov	dptr,#_x
   044F E0                 1316 	movx	a,@dptr
   0450 FE                 1317 	mov	r6,a
   0451 8C 82              1318 	mov	dpl,r4
   0453 8D 83              1319 	mov	dph,r5
   0455 F0                 1320 	movx	@dptr,a
                           1321 ;	main.c:196: i++;
   0456 90s00r00           1322 	mov	dptr,#_i
   0459 74 01              1323 	mov	a,#0x01
   045B 2A                 1324 	add	a,r2
   045C F0                 1325 	movx	@dptr,a
   045D E4                 1326 	clr	a
   045E 3B                 1327 	addc	a,r3
   045F A3                 1328 	inc	dptr
   0460 F0                 1329 	movx	@dptr,a
                           1330 ;	main.c:197: }while((x != ',')&&(x!= '\r')); // x y and z data are separated by ','
   0461 BE 2C 02           1331 	cjne	r6,#0x2C,00195$
   0464 80 03              1332 	sjmp	00117$
   0466                    1333 00195$:
   0466 BE 0D C2           1334 	cjne	r6,#0x0D,00111$
   0469                    1335 00117$:
                           1336 ;	main.c:198: ch_data[i-1]='\0';      //making the int string value into a null terminated string for atoi
   0469 90s00r00           1337 	mov	dptr,#_i
   046C E0                 1338 	movx	a,@dptr
   046D FA                 1339 	mov	r2,a
   046E A3                 1340 	inc	dptr
   046F E0                 1341 	movx	a,@dptr
   0470 EA                 1342 	mov	a,r2
   0471 14                 1343 	dec	a
   0472 24r00              1344 	add	a,#_ch_data
   0474 F5 82              1345 	mov	dpl,a
   0476 E4                 1346 	clr	a
   0477 34s00              1347 	addc	a,#(_ch_data >> 8)
   0479 F5 83              1348 	mov	dph,a
   047B E4                 1349 	clr	a
   047C F0                 1350 	movx	@dptr,a
                           1351 ;	main.c:199: xyz_data[j]=atoi(ch_data); // convert data from ascii to int
   047D 90s00r02           1352 	mov	dptr,#_j
   0480 E0                 1353 	movx	a,@dptr
   0481 FA                 1354 	mov	r2,a
   0482 A3                 1355 	inc	dptr
   0483 E0                 1356 	movx	a,@dptr
   0484 CA                 1357 	xch	a,r2
   0485 25 E0              1358 	add	a,acc
   0487 CA                 1359 	xch	a,r2
   0488 33                 1360 	rlc	a
   0489 FB                 1361 	mov	r3,a
   048A EA                 1362 	mov	a,r2
   048B 24r06              1363 	add	a,#_xyz_data
   048D FA                 1364 	mov	r2,a
   048E EB                 1365 	mov	a,r3
   048F 34s00              1366 	addc	a,#(_xyz_data >> 8)
   0491 FB                 1367 	mov	r3,a
   0492 90s00r00           1368 	mov	dptr,#_ch_data
   0495 75 F0 00           1369 	mov	b,#0x00
   0498 C0 02              1370 	push	ar2
   049A C0 03              1371 	push	ar3
   049C 12s00r00           1372 	lcall	_atoi
   049F AC 82              1373 	mov	r4,dpl
   04A1 AD 83              1374 	mov	r5,dph
   04A3 D0 03              1375 	pop	ar3
   04A5 D0 02              1376 	pop	ar2
   04A7 8A 82              1377 	mov	dpl,r2
   04A9 8B 83              1378 	mov	dph,r3
   04AB EC                 1379 	mov	a,r4
   04AC F0                 1380 	movx	@dptr,a
   04AD A3                 1381 	inc	dptr
   04AE ED                 1382 	mov	a,r5
   04AF F0                 1383 	movx	@dptr,a
                           1384 ;	main.c:200: j++;
   04B0 90s00r02           1385 	mov	dptr,#_j
   04B3 E0                 1386 	movx	a,@dptr
   04B4 24 01              1387 	add	a,#0x01
   04B6 F0                 1388 	movx	@dptr,a
   04B7 A3                 1389 	inc	dptr
   04B8 E0                 1390 	movx	a,@dptr
   04B9 34 00              1391 	addc	a,#0x00
   04BB F0                 1392 	movx	@dptr,a
                           1393 ;	main.c:201: }while(x != '\r'); // signal to describe the end of transmission
   04BC 90s00r04           1394 	mov	dptr,#_x
   04BF E0                 1395 	movx	a,@dptr
   04C0 FA                 1396 	mov	r2,a
   04C1 BA 0D 02           1397 	cjne	r2,#0x0D,00198$
   04C4 80 03              1398 	sjmp	00199$
   04C6                    1399 00198$:
   04C6 02s04r24           1400 	ljmp	00118$
   04C9                    1401 00199$:
                           1402 ;	main.c:203: if(xyz_data[0] > 120) // for x axis for left movement
   04C9 90s00r06           1403 	mov	dptr,#_xyz_data
   04CC E0                 1404 	movx	a,@dptr
   04CD FA                 1405 	mov	r2,a
   04CE A3                 1406 	inc	dptr
   04CF E0                 1407 	movx	a,@dptr
   04D0 FB                 1408 	mov	r3,a
   04D1 C3                 1409 	clr	c
   04D2 74 78              1410 	mov	a,#0x78
   04D4 9A                 1411 	subb	a,r2
   04D5 74 80              1412 	mov	a,#(0x00 ^ 0x80)
   04D7 8B F0              1413 	mov	b,r3
   04D9 63 F0 80           1414 	xrl	b,#0x80
   04DC 95 F0              1415 	subb	a,b
   04DE 40 03              1416 	jc	00200$
   04E0 02s05r7E           1417 	ljmp	00130$
   04E3                    1418 00200$:
                           1419 ;	main.c:205: lcdclear();
   04E3 12s00r00           1420 	lcall	_lcdclear
                           1421 ;	main.c:206: lcdgotoxy(y_random, x_random);
   04E6 90s00r0D           1422 	mov	dptr,#_y_random
   04E9 E0                 1423 	movx	a,@dptr
   04EA FC                 1424 	mov	r4,a
   04EB 90s00r0C           1425 	mov	dptr,#_x_random
   04EE E0                 1426 	movx	a,@dptr
   04EF 90s00r00           1427 	mov	dptr,#_lcdgotoxy_PARM_2
   04F2 F0                 1428 	movx	@dptr,a
   04F3 8C 82              1429 	mov	dpl,r4
   04F5 12s00r00           1430 	lcall	_lcdgotoxy
                           1431 ;	main.c:207: LCD_print_CG(CG_CHAR_CODE_PACMAN_FOOD);
   04F8 75 82 02           1432 	mov	dpl,#0x02
   04FB 12s00r00           1433 	lcall	_LCD_print_CG
                           1434 ;	main.c:208: (x_move-1 < X_MOVE_LOWER_LIMIT) ? (x_move = X_MOVE_UPPER_LIMIT) : --x_move; // roll over to the opposite side
   04FE 90s00r05           1435 	mov	dptr,#_x_move
   0501 E0                 1436 	movx	a,@dptr
   0502 FC                 1437 	mov	r4,a
   0503 FD                 1438 	mov	r5,a
   0504 33                 1439 	rlc	a
   0505 95 E0              1440 	subb	a,acc
   0507 FE                 1441 	mov	r6,a
   0508 1D                 1442 	dec	r5
   0509 BD FF 01           1443 	cjne	r5,#0xff,00201$
   050C 1E                 1444 	dec	r6
   050D                    1445 00201$:
   050D EE                 1446 	mov	a,r6
   050E 30 E7 08           1447 	jnb	acc.7,00150$
   0511 90s00r05           1448 	mov	dptr,#_x_move
   0514 74 0F              1449 	mov	a,#0x0F
   0516 F0                 1450 	movx	@dptr,a
   0517 80 06              1451 	sjmp	00151$
   0519                    1452 00150$:
   0519 EC                 1453 	mov	a,r4
   051A 14                 1454 	dec	a
   051B 90s00r05           1455 	mov	dptr,#_x_move
   051E F0                 1456 	movx	@dptr,a
   051F                    1457 00151$:
                           1458 ;	main.c:209: if(x_move == x_random && y_move == y_random) // when the pacman eats the food
   051F 90s00r05           1459 	mov	dptr,#_x_move
   0522 E0                 1460 	movx	a,@dptr
   0523 FC                 1461 	mov	r4,a
   0524 90s00r0C           1462 	mov	dptr,#_x_random
   0527 E0                 1463 	movx	a,@dptr
   0528 FD                 1464 	mov	r5,a
   0529 EC                 1465 	mov	a,r4
   052A B5 05 32           1466 	cjne	a,ar5,00122$
   052D 90s00r06           1467 	mov	dptr,#_y_move
   0530 E0                 1468 	movx	a,@dptr
   0531 FC                 1469 	mov	r4,a
   0532 90s00r0D           1470 	mov	dptr,#_y_random
   0535 E0                 1471 	movx	a,@dptr
   0536 FD                 1472 	mov	r5,a
   0537 EC                 1473 	mov	a,r4
   0538 B5 05 24           1474 	cjne	a,ar5,00122$
                           1475 ;	main.c:211: timecheck = 0;
   053B 90s00r21           1476 	mov	dptr,#_main_timecheck_1_1
   053E E4                 1477 	clr	a
   053F F0                 1478 	movx	@dptr,a
                           1479 ;	main.c:212: TR0 = 0;
   0540 C2 8C              1480 	clr	_TR0
                           1481 ;	main.c:213: timerINTcount=0;
   0542 90s00r0F           1482 	mov	dptr,#_timerINTcount
   0545 E4                 1483 	clr	a
   0546 F0                 1484 	movx	@dptr,a
                           1485 ;	main.c:214: P1_3 = 0;
   0547 C2 93              1486 	clr	_P1_3
                           1487 ;	main.c:215: P1_4 = 0;
   0549 C2 94              1488 	clr	_P1_4
                           1489 ;	main.c:216: lcdclear();
   054B 12s00r00           1490 	lcall	_lcdclear
                           1491 ;	main.c:217: putRandom();  // put food in a different location
   054E 12s01rB1           1492 	lcall	_putRandom
                           1493 ;	main.c:218: score++; // update score
   0551 90s00r22           1494 	mov	dptr,#_main_score_1_1
   0554 E0                 1495 	movx	a,@dptr
   0555 24 01              1496 	add	a,#0x01
   0557 F0                 1497 	movx	@dptr,a
   0558 A3                 1498 	inc	dptr
   0559 E0                 1499 	movx	a,@dptr
   055A 34 00              1500 	addc	a,#0x00
   055C F0                 1501 	movx	@dptr,a
                           1502 ;	main.c:219: TR0 = 1;
   055D D2 8C              1503 	setb	_TR0
   055F                    1504 00122$:
                           1505 ;	main.c:221: lcdgotoxy(y_move,x_move); // got to changed x positon on lcd
   055F 90s00r06           1506 	mov	dptr,#_y_move
   0562 E0                 1507 	movx	a,@dptr
   0563 FC                 1508 	mov	r4,a
   0564 90s00r05           1509 	mov	dptr,#_x_move
   0567 E0                 1510 	movx	a,@dptr
   0568 90s00r00           1511 	mov	dptr,#_lcdgotoxy_PARM_2
   056B F0                 1512 	movx	@dptr,a
   056C 8C 82              1513 	mov	dpl,r4
   056E 12s00r00           1514 	lcall	_lcdgotoxy
                           1515 ;	main.c:222: LCD_print_CG(CG_CHAR_CODE_PACMAN_REVERSE); // for left movemt
   0571 75 82 01           1516 	mov	dpl,#0x01
   0574 12s00r00           1517 	lcall	_LCD_print_CG
                           1518 ;	main.c:224: P1_4 = 1; //buzzer
   0577 D2 94              1519 	setb	_P1_4
                           1520 ;	main.c:225: P1_3 = 1; // led
   0579 D2 93              1521 	setb	_P1_3
   057B 02s06r2E           1522 	ljmp	00131$
   057E                    1523 00130$:
                           1524 ;	main.c:227: else if(xyz_data[0] < -120)    // for right movement
   057E C3                 1525 	clr	c
   057F EA                 1526 	mov	a,r2
   0580 94 88              1527 	subb	a,#0x88
   0582 EB                 1528 	mov	a,r3
   0583 64 80              1529 	xrl	a,#0x80
   0585 94 7F              1530 	subb	a,#0x7f
   0587 40 03              1531 	jc	00207$
   0589 02s06r2E           1532 	ljmp	00131$
   058C                    1533 00207$:
                           1534 ;	main.c:229: lcdclear();
   058C 12s00r00           1535 	lcall	_lcdclear
                           1536 ;	main.c:230: lcdgotoxy(y_random, x_random); // location of food
   058F 90s00r0D           1537 	mov	dptr,#_y_random
   0592 E0                 1538 	movx	a,@dptr
   0593 FA                 1539 	mov	r2,a
   0594 90s00r0C           1540 	mov	dptr,#_x_random
   0597 E0                 1541 	movx	a,@dptr
   0598 90s00r00           1542 	mov	dptr,#_lcdgotoxy_PARM_2
   059B F0                 1543 	movx	@dptr,a
   059C 8A 82              1544 	mov	dpl,r2
   059E 12s00r00           1545 	lcall	_lcdgotoxy
                           1546 ;	main.c:232: LCD_print_CG(CG_CHAR_CODE_PACMAN_FOOD); // food
   05A1 75 82 02           1547 	mov	dpl,#0x02
   05A4 12s00r00           1548 	lcall	_LCD_print_CG
                           1549 ;	main.c:233: (x_move+1 > X_MOVE_UPPER_LIMIT) ? (x_move = X_MOVE_LOWER_LIMIT) : ++x_move ; // roll over and go to opposide side
   05A7 90s00r05           1550 	mov	dptr,#_x_move
   05AA E0                 1551 	movx	a,@dptr
   05AB FA                 1552 	mov	r2,a
   05AC FB                 1553 	mov	r3,a
   05AD 33                 1554 	rlc	a
   05AE 95 E0              1555 	subb	a,acc
   05B0 FC                 1556 	mov	r4,a
   05B1 0B                 1557 	inc	r3
   05B2 BB 00 01           1558 	cjne	r3,#0x00,00208$
   05B5 0C                 1559 	inc	r4
   05B6                    1560 00208$:
   05B6 C3                 1561 	clr	c
   05B7 74 0F              1562 	mov	a,#0x0F
   05B9 9B                 1563 	subb	a,r3
   05BA 74 80              1564 	mov	a,#(0x00 ^ 0x80)
   05BC 8C F0              1565 	mov	b,r4
   05BE 63 F0 80           1566 	xrl	b,#0x80
   05C1 95 F0              1567 	subb	a,b
   05C3 50 07              1568 	jnc	00152$
   05C5 90s00r05           1569 	mov	dptr,#_x_move
   05C8 E4                 1570 	clr	a
   05C9 F0                 1571 	movx	@dptr,a
   05CA 80 06              1572 	sjmp	00153$
   05CC                    1573 00152$:
   05CC 90s00r05           1574 	mov	dptr,#_x_move
   05CF EA                 1575 	mov	a,r2
   05D0 04                 1576 	inc	a
   05D1 F0                 1577 	movx	@dptr,a
   05D2                    1578 00153$:
                           1579 ;	main.c:234: if(x_move == x_random && y_move == y_random)
   05D2 90s00r05           1580 	mov	dptr,#_x_move
   05D5 E0                 1581 	movx	a,@dptr
   05D6 FA                 1582 	mov	r2,a
   05D7 90s00r0C           1583 	mov	dptr,#_x_random
   05DA E0                 1584 	movx	a,@dptr
   05DB FB                 1585 	mov	r3,a
   05DC EA                 1586 	mov	a,r2
   05DD B5 03 32           1587 	cjne	a,ar3,00125$
   05E0 90s00r06           1588 	mov	dptr,#_y_move
   05E3 E0                 1589 	movx	a,@dptr
   05E4 FA                 1590 	mov	r2,a
   05E5 90s00r0D           1591 	mov	dptr,#_y_random
   05E8 E0                 1592 	movx	a,@dptr
   05E9 FB                 1593 	mov	r3,a
   05EA EA                 1594 	mov	a,r2
   05EB B5 03 24           1595 	cjne	a,ar3,00125$
                           1596 ;	main.c:236: timecheck = 0;
   05EE 90s00r21           1597 	mov	dptr,#_main_timecheck_1_1
   05F1 E4                 1598 	clr	a
   05F2 F0                 1599 	movx	@dptr,a
                           1600 ;	main.c:237: TR0 = 0;
   05F3 C2 8C              1601 	clr	_TR0
                           1602 ;	main.c:238: timerINTcount=0;
   05F5 90s00r0F           1603 	mov	dptr,#_timerINTcount
   05F8 E4                 1604 	clr	a
   05F9 F0                 1605 	movx	@dptr,a
                           1606 ;	main.c:239: P1_3 = 0;
   05FA C2 93              1607 	clr	_P1_3
                           1608 ;	main.c:240: P1_4 = 0;
   05FC C2 94              1609 	clr	_P1_4
                           1610 ;	main.c:241: lcdclear();
   05FE 12s00r00           1611 	lcall	_lcdclear
                           1612 ;	main.c:242: putRandom();
   0601 12s01rB1           1613 	lcall	_putRandom
                           1614 ;	main.c:243: score++;
   0604 90s00r22           1615 	mov	dptr,#_main_score_1_1
   0607 E0                 1616 	movx	a,@dptr
   0608 24 01              1617 	add	a,#0x01
   060A F0                 1618 	movx	@dptr,a
   060B A3                 1619 	inc	dptr
   060C E0                 1620 	movx	a,@dptr
   060D 34 00              1621 	addc	a,#0x00
   060F F0                 1622 	movx	@dptr,a
                           1623 ;	main.c:244: TR0 = 1;
   0610 D2 8C              1624 	setb	_TR0
   0612                    1625 00125$:
                           1626 ;	main.c:247: lcdgotoxy(y_move,x_move);
   0612 90s00r06           1627 	mov	dptr,#_y_move
   0615 E0                 1628 	movx	a,@dptr
   0616 FA                 1629 	mov	r2,a
   0617 90s00r05           1630 	mov	dptr,#_x_move
   061A E0                 1631 	movx	a,@dptr
   061B 90s00r00           1632 	mov	dptr,#_lcdgotoxy_PARM_2
   061E F0                 1633 	movx	@dptr,a
   061F 8A 82              1634 	mov	dpl,r2
   0621 12s00r00           1635 	lcall	_lcdgotoxy
                           1636 ;	main.c:249: LCD_print_CG(CG_CHAR_CODE_PACMAN_FORWARD); // for right movt
   0624 75 82 00           1637 	mov	dpl,#0x00
   0627 12s00r00           1638 	lcall	_LCD_print_CG
                           1639 ;	main.c:250: P1_4 = 1;
   062A D2 94              1640 	setb	_P1_4
                           1641 ;	main.c:251: P1_3 = 1;
   062C D2 93              1642 	setb	_P1_3
   062E                    1643 00131$:
                           1644 ;	main.c:253: if(xyz_data[1] > 140)  // y axis down
   062E 90s00r08           1645 	mov	dptr,#(_xyz_data + 0x0002)
   0631 E0                 1646 	movx	a,@dptr
   0632 FA                 1647 	mov	r2,a
   0633 A3                 1648 	inc	dptr
   0634 E0                 1649 	movx	a,@dptr
   0635 FB                 1650 	mov	r3,a
   0636 C3                 1651 	clr	c
   0637 74 8C              1652 	mov	a,#0x8C
   0639 9A                 1653 	subb	a,r2
   063A 74 80              1654 	mov	a,#(0x00 ^ 0x80)
   063C 8B F0              1655 	mov	b,r3
   063E 63 F0 80           1656 	xrl	b,#0x80
   0641 95 F0              1657 	subb	a,b
   0643 40 03              1658 	jc	00214$
   0645 02s06rED           1659 	ljmp	00141$
   0648                    1660 00214$:
                           1661 ;	main.c:255: lcdclear();
   0648 12s00r00           1662 	lcall	_lcdclear
                           1663 ;	main.c:256: lcdgotoxy(y_random, x_random);
   064B 90s00r0D           1664 	mov	dptr,#_y_random
   064E E0                 1665 	movx	a,@dptr
   064F FC                 1666 	mov	r4,a
   0650 90s00r0C           1667 	mov	dptr,#_x_random
   0653 E0                 1668 	movx	a,@dptr
   0654 90s00r00           1669 	mov	dptr,#_lcdgotoxy_PARM_2
   0657 F0                 1670 	movx	@dptr,a
   0658 8C 82              1671 	mov	dpl,r4
   065A 12s00r00           1672 	lcall	_lcdgotoxy
                           1673 ;	main.c:258: LCD_print_CG(CG_CHAR_CODE_PACMAN_FOOD);
   065D 75 82 02           1674 	mov	dpl,#0x02
   0660 12s00r00           1675 	lcall	_LCD_print_CG
                           1676 ;	main.c:259: (y_move+1 > Y_MOVE_UPPER_LIMIT) ? (y_move = Y_MOVE_LOWER_LIMIT) : ++y_move; // roll over to the opposite side
   0663 90s00r06           1677 	mov	dptr,#_y_move
   0666 E0                 1678 	movx	a,@dptr
   0667 FC                 1679 	mov	r4,a
   0668 FD                 1680 	mov	r5,a
   0669 33                 1681 	rlc	a
   066A 95 E0              1682 	subb	a,acc
   066C FE                 1683 	mov	r6,a
   066D 0D                 1684 	inc	r5
   066E BD 00 01           1685 	cjne	r5,#0x00,00215$
   0671 0E                 1686 	inc	r6
   0672                    1687 00215$:
   0672 C3                 1688 	clr	c
   0673 74 03              1689 	mov	a,#0x03
   0675 9D                 1690 	subb	a,r5
   0676 74 80              1691 	mov	a,#(0x00 ^ 0x80)
   0678 8E F0              1692 	mov	b,r6
   067A 63 F0 80           1693 	xrl	b,#0x80
   067D 95 F0              1694 	subb	a,b
   067F 50 07              1695 	jnc	00154$
   0681 90s00r06           1696 	mov	dptr,#_y_move
   0684 E4                 1697 	clr	a
   0685 F0                 1698 	movx	@dptr,a
   0686 80 06              1699 	sjmp	00155$
   0688                    1700 00154$:
   0688 90s00r06           1701 	mov	dptr,#_y_move
   068B EC                 1702 	mov	a,r4
   068C 04                 1703 	inc	a
   068D F0                 1704 	movx	@dptr,a
   068E                    1705 00155$:
                           1706 ;	main.c:260: if(x_move == x_random && y_move == y_random)
   068E 90s00r05           1707 	mov	dptr,#_x_move
   0691 E0                 1708 	movx	a,@dptr
   0692 FC                 1709 	mov	r4,a
   0693 90s00r0C           1710 	mov	dptr,#_x_random
   0696 E0                 1711 	movx	a,@dptr
   0697 FD                 1712 	mov	r5,a
   0698 EC                 1713 	mov	a,r4
   0699 B5 05 32           1714 	cjne	a,ar5,00133$
   069C 90s00r06           1715 	mov	dptr,#_y_move
   069F E0                 1716 	movx	a,@dptr
   06A0 FC                 1717 	mov	r4,a
   06A1 90s00r0D           1718 	mov	dptr,#_y_random
   06A4 E0                 1719 	movx	a,@dptr
   06A5 FD                 1720 	mov	r5,a
   06A6 EC                 1721 	mov	a,r4
   06A7 B5 05 24           1722 	cjne	a,ar5,00133$
                           1723 ;	main.c:262: timecheck = 0;
   06AA 90s00r21           1724 	mov	dptr,#_main_timecheck_1_1
   06AD E4                 1725 	clr	a
   06AE F0                 1726 	movx	@dptr,a
                           1727 ;	main.c:263: TR0 = 0;
   06AF C2 8C              1728 	clr	_TR0
                           1729 ;	main.c:264: timerINTcount=0;
   06B1 90s00r0F           1730 	mov	dptr,#_timerINTcount
   06B4 E4                 1731 	clr	a
   06B5 F0                 1732 	movx	@dptr,a
                           1733 ;	main.c:265: P1_3 = 0;
   06B6 C2 93              1734 	clr	_P1_3
                           1735 ;	main.c:266: P1_4 = 0;
   06B8 C2 94              1736 	clr	_P1_4
                           1737 ;	main.c:267: lcdclear();
   06BA 12s00r00           1738 	lcall	_lcdclear
                           1739 ;	main.c:268: putRandom();
   06BD 12s01rB1           1740 	lcall	_putRandom
                           1741 ;	main.c:269: score++;
   06C0 90s00r22           1742 	mov	dptr,#_main_score_1_1
   06C3 E0                 1743 	movx	a,@dptr
   06C4 24 01              1744 	add	a,#0x01
   06C6 F0                 1745 	movx	@dptr,a
   06C7 A3                 1746 	inc	dptr
   06C8 E0                 1747 	movx	a,@dptr
   06C9 34 00              1748 	addc	a,#0x00
   06CB F0                 1749 	movx	@dptr,a
                           1750 ;	main.c:270: TR0 = 1;
   06CC D2 8C              1751 	setb	_TR0
   06CE                    1752 00133$:
                           1753 ;	main.c:272: lcdgotoxy(y_move,x_move);
   06CE 90s00r06           1754 	mov	dptr,#_y_move
   06D1 E0                 1755 	movx	a,@dptr
   06D2 FC                 1756 	mov	r4,a
   06D3 90s00r05           1757 	mov	dptr,#_x_move
   06D6 E0                 1758 	movx	a,@dptr
   06D7 90s00r00           1759 	mov	dptr,#_lcdgotoxy_PARM_2
   06DA F0                 1760 	movx	@dptr,a
   06DB 8C 82              1761 	mov	dpl,r4
   06DD 12s00r00           1762 	lcall	_lcdgotoxy
                           1763 ;	main.c:273: LCD_print_CG(CG_CHAR_CODE_PACMAN_FORWARD);
   06E0 75 82 00           1764 	mov	dpl,#0x00
   06E3 12s00r00           1765 	lcall	_LCD_print_CG
                           1766 ;	main.c:275: P1_4 = 1;
   06E6 D2 94              1767 	setb	_P1_4
                           1768 ;	main.c:276: P1_3 = 1;
   06E8 D2 93              1769 	setb	_P1_3
   06EA 02s07r93           1770 	ljmp	00142$
   06ED                    1771 00141$:
                           1772 ;	main.c:278: else if(xyz_data[1] < -140) // y axis up
   06ED C3                 1773 	clr	c
   06EE EA                 1774 	mov	a,r2
   06EF 94 74              1775 	subb	a,#0x74
   06F1 EB                 1776 	mov	a,r3
   06F2 64 80              1777 	xrl	a,#0x80
   06F4 94 7F              1778 	subb	a,#0x7f
   06F6 40 03              1779 	jc	00221$
   06F8 02s07r93           1780 	ljmp	00142$
   06FB                    1781 00221$:
                           1782 ;	main.c:280: lcdclear();
   06FB 12s00r00           1783 	lcall	_lcdclear
                           1784 ;	main.c:281: lcdgotoxy(y_random, x_random);
   06FE 90s00r0D           1785 	mov	dptr,#_y_random
   0701 E0                 1786 	movx	a,@dptr
   0702 FA                 1787 	mov	r2,a
   0703 90s00r0C           1788 	mov	dptr,#_x_random
   0706 E0                 1789 	movx	a,@dptr
   0707 90s00r00           1790 	mov	dptr,#_lcdgotoxy_PARM_2
   070A F0                 1791 	movx	@dptr,a
   070B 8A 82              1792 	mov	dpl,r2
   070D 12s00r00           1793 	lcall	_lcdgotoxy
                           1794 ;	main.c:283: LCD_print_CG(CG_CHAR_CODE_PACMAN_FOOD);
   0710 75 82 02           1795 	mov	dpl,#0x02
   0713 12s00r00           1796 	lcall	_LCD_print_CG
                           1797 ;	main.c:284: (y_move-1 < Y_MOVE_LOWER_LIMIT) ? (y_move = Y_MOVE_UPPER_LIMIT) : --y_move;  // roll over
   0716 90s00r06           1798 	mov	dptr,#_y_move
   0719 E0                 1799 	movx	a,@dptr
   071A FA                 1800 	mov	r2,a
   071B FB                 1801 	mov	r3,a
   071C 33                 1802 	rlc	a
   071D 95 E0              1803 	subb	a,acc
   071F FC                 1804 	mov	r4,a
   0720 1B                 1805 	dec	r3
   0721 BB FF 01           1806 	cjne	r3,#0xff,00222$
   0724 1C                 1807 	dec	r4
   0725                    1808 00222$:
   0725 EC                 1809 	mov	a,r4
   0726 30 E7 08           1810 	jnb	acc.7,00156$
   0729 90s00r06           1811 	mov	dptr,#_y_move
   072C 74 03              1812 	mov	a,#0x03
   072E F0                 1813 	movx	@dptr,a
   072F 80 06              1814 	sjmp	00157$
   0731                    1815 00156$:
   0731 EA                 1816 	mov	a,r2
   0732 14                 1817 	dec	a
   0733 90s00r06           1818 	mov	dptr,#_y_move
   0736 F0                 1819 	movx	@dptr,a
   0737                    1820 00157$:
                           1821 ;	main.c:285: if(x_move == x_random && y_move == y_random) //position matched
   0737 90s00r05           1822 	mov	dptr,#_x_move
   073A E0                 1823 	movx	a,@dptr
   073B FA                 1824 	mov	r2,a
   073C 90s00r0C           1825 	mov	dptr,#_x_random
   073F E0                 1826 	movx	a,@dptr
   0740 FB                 1827 	mov	r3,a
   0741 EA                 1828 	mov	a,r2
   0742 B5 03 32           1829 	cjne	a,ar3,00136$
   0745 90s00r06           1830 	mov	dptr,#_y_move
   0748 E0                 1831 	movx	a,@dptr
   0749 FA                 1832 	mov	r2,a
   074A 90s00r0D           1833 	mov	dptr,#_y_random
   074D E0                 1834 	movx	a,@dptr
   074E FB                 1835 	mov	r3,a
   074F EA                 1836 	mov	a,r2
   0750 B5 03 24           1837 	cjne	a,ar3,00136$
                           1838 ;	main.c:287: timecheck = 0;
   0753 90s00r21           1839 	mov	dptr,#_main_timecheck_1_1
   0756 E4                 1840 	clr	a
   0757 F0                 1841 	movx	@dptr,a
                           1842 ;	main.c:288: TR0 = 0;
   0758 C2 8C              1843 	clr	_TR0
                           1844 ;	main.c:289: timerINTcount=0;
   075A 90s00r0F           1845 	mov	dptr,#_timerINTcount
   075D E4                 1846 	clr	a
   075E F0                 1847 	movx	@dptr,a
                           1848 ;	main.c:290: P1_3 = 0;
   075F C2 93              1849 	clr	_P1_3
                           1850 ;	main.c:291: P1_4 = 0;
   0761 C2 94              1851 	clr	_P1_4
                           1852 ;	main.c:292: lcdclear();
   0763 12s00r00           1853 	lcall	_lcdclear
                           1854 ;	main.c:293: putRandom();
   0766 12s01rB1           1855 	lcall	_putRandom
                           1856 ;	main.c:294: score++;
   0769 90s00r22           1857 	mov	dptr,#_main_score_1_1
   076C E0                 1858 	movx	a,@dptr
   076D 24 01              1859 	add	a,#0x01
   076F F0                 1860 	movx	@dptr,a
   0770 A3                 1861 	inc	dptr
   0771 E0                 1862 	movx	a,@dptr
   0772 34 00              1863 	addc	a,#0x00
   0774 F0                 1864 	movx	@dptr,a
                           1865 ;	main.c:295: TR0 = 1;
   0775 D2 8C              1866 	setb	_TR0
   0777                    1867 00136$:
                           1868 ;	main.c:297: lcdgotoxy(y_move,x_move);
   0777 90s00r06           1869 	mov	dptr,#_y_move
   077A E0                 1870 	movx	a,@dptr
   077B FA                 1871 	mov	r2,a
   077C 90s00r05           1872 	mov	dptr,#_x_move
   077F E0                 1873 	movx	a,@dptr
   0780 90s00r00           1874 	mov	dptr,#_lcdgotoxy_PARM_2
   0783 F0                 1875 	movx	@dptr,a
   0784 8A 82              1876 	mov	dpl,r2
   0786 12s00r00           1877 	lcall	_lcdgotoxy
                           1878 ;	main.c:298: LCD_print_CG(CG_CHAR_CODE_PACMAN_FORWARD);
   0789 75 82 00           1879 	mov	dpl,#0x00
   078C 12s00r00           1880 	lcall	_LCD_print_CG
                           1881 ;	main.c:300: P1_4 = 1;
   078F D2 94              1882 	setb	_P1_4
                           1883 ;	main.c:301: P1_3 = 1;
   0791 D2 93              1884 	setb	_P1_3
   0793                    1885 00142$:
                           1886 ;	main.c:303: if(xyz_data[2] < -220) // z axis down
   0793 90s00r0A           1887 	mov	dptr,#(_xyz_data + 0x0004)
   0796 E0                 1888 	movx	a,@dptr
   0797 FA                 1889 	mov	r2,a
   0798 A3                 1890 	inc	dptr
   0799 E0                 1891 	movx	a,@dptr
   079A FB                 1892 	mov	r3,a
   079B C3                 1893 	clr	c
   079C EA                 1894 	mov	a,r2
   079D 94 24              1895 	subb	a,#0x24
   079F EB                 1896 	mov	a,r3
   07A0 64 80              1897 	xrl	a,#0x80
   07A2 94 7F              1898 	subb	a,#0x7f
   07A4 50 32              1899 	jnc	00144$
                           1900 ;	main.c:305: timecheck = 0;
   07A6 90s00r21           1901 	mov	dptr,#_main_timecheck_1_1
   07A9 E4                 1902 	clr	a
   07AA F0                 1903 	movx	@dptr,a
                           1904 ;	main.c:306: TR0 = 0;
   07AB C2 8C              1905 	clr	_TR0
                           1906 ;	main.c:307: lcdclear();
   07AD 12s00r00           1907 	lcall	_lcdclear
                           1908 ;	main.c:308: y_move = 2;
   07B0 90s00r06           1909 	mov	dptr,#_y_move
   07B3 74 02              1910 	mov	a,#0x02
   07B5 F0                 1911 	movx	@dptr,a
                           1912 ;	main.c:309: x_move = 7;
   07B6 90s00r05           1913 	mov	dptr,#_x_move
   07B9 74 07              1914 	mov	a,#0x07
   07BB F0                 1915 	movx	@dptr,a
                           1916 ;	main.c:310: lcdgotoxy(y_move,x_move); // reset the position
   07BC 90s00r00           1917 	mov	dptr,#_lcdgotoxy_PARM_2
   07BF 74 07              1918 	mov	a,#0x07
   07C1 F0                 1919 	movx	@dptr,a
   07C2 75 82 02           1920 	mov	dpl,#0x02
   07C5 12s00r00           1921 	lcall	_lcdgotoxy
                           1922 ;	main.c:311: LCD_print_CG(CG_CHAR_CODE_PACMAN_FORWARD);
   07C8 75 82 00           1923 	mov	dpl,#0x00
   07CB 12s00r00           1924 	lcall	_LCD_print_CG
                           1925 ;	main.c:313: putRandom();
   07CE 12s01rB1           1926 	lcall	_putRandom
                           1927 ;	main.c:314: timerINTcount=0;
   07D1 90s00r0F           1928 	mov	dptr,#_timerINTcount
   07D4 E4                 1929 	clr	a
   07D5 F0                 1930 	movx	@dptr,a
                           1931 ;	main.c:315: TR0 = 1;
   07D6 D2 8C              1932 	setb	_TR0
   07D8                    1933 00144$:
                           1934 ;	main.c:317: timecheck++;
   07D8 90s00r21           1935 	mov	dptr,#_main_timecheck_1_1
   07DB E0                 1936 	movx	a,@dptr
   07DC 24 01              1937 	add	a,#0x01
   07DE F0                 1938 	movx	@dptr,a
   07DF 02s03r27           1939 	ljmp	00146$
                           1940 	.area CSEG    (CODE)
                           1941 	.area CONST   (CODE)
   0000                    1942 __str_0:
   0000 47 61 6D 65 20 69  1943 	.ascii "Game init"
        6E 69 74
   0009 0D                 1944 	.db 0x0D
   000A 0A                 1945 	.db 0x0A
   000B 00                 1946 	.db 0x00
   000C                    1947 __str_1:
   000C 2A 20 2A 20 2A 20  1948 	.ascii "* * * * * * * *"
        2A 20 2A 20 2A 20
        2A 20 2A
   001B 00                 1949 	.db 0x00
   001C                    1950 __str_2:
   001C 20 20 20 50 41 43  1951 	.ascii "   PAC   MAN   "
        20 20 20 4D 41 4E
        20 20 20
   002B 00                 1952 	.db 0x00
   002C                    1953 __str_3:
   002C 20 20 50 52 45 53  1954 	.ascii "  PRESS RESET  "
        53 20 52 45 53 45
        54 20 20
   003B 00                 1955 	.db 0x00
   003C                    1956 __str_4:
   003C 4F 4E 20 4D 53 50  1957 	.ascii "ON MSP TO START"
        20 54 4F 20 53 54
        41 52 54
   004B 00                 1958 	.db 0x00
   004C                    1959 __str_5:
   004C 54 69 6D 65 72 20  1960 	.ascii "Timer started"
        73 74 61 72 74 65
        64
   0059 0D                 1961 	.db 0x0D
   005A 0A                 1962 	.db 0x0A
   005B 00                 1963 	.db 0x00
   005C                    1964 __str_6:
   005C 2A 2A 20 47 41 4D  1965 	.ascii "** GAME  OVER **"
        45 20 20 4F 56 45
        52 20 2A 2A
   006C 00                 1966 	.db 0x00
   006D                    1967 __str_7:
   006D 20 20 53 43 4F 52  1968 	.ascii "  SCORE:"
        45 3A
   0075 00                 1969 	.db 0x00
   0076                    1970 __str_8:
   0076 25 64              1971 	.ascii "%d"
   0078 00                 1972 	.db 0x00
   0079                    1973 __str_9:
   0079 50 52 45 53 53 20  1974 	.ascii "PRESS MSP RESET"
        4D 53 50 20 52 45
        53 45 54
   0088 00                 1975 	.db 0x00
                           1976 	.area XINIT   (CODE)
   0000                    1977 __xinit__ch_data:
   0000 00                 1978 	.db #0x00	; 0
   0001 00                 1979 	.db 0x00
   0002 00                 1980 	.db 0x00
   0003 00                 1981 	.db 0x00
   0004 00                 1982 	.db 0x00
   0005 00                 1983 	.db 0x00
   0006                    1984 __xinit__xyz_data:
   0006 00 00              1985 	.byte #0x00,#0x00	;  0
   0008 00                 1986 	.db 0x00
   0009 00                 1987 	.db 0x00
   000A 00                 1988 	.db 0x00
   000B 00                 1989 	.db 0x00
   000C                    1990 __xinit__x_random:
   000C 00                 1991 	.db #0x00	;  0
   000D                    1992 __xinit__y_random:
   000D 00                 1993 	.db #0x00	;  0
   000E                    1994 __xinit__timeout:
   000E 00                 1995 	.db #0x00	; 0
   000F                    1996 __xinit__timerINTcount:
   000F 00                 1997 	.db #0x00	; 0
                           1998 	.area CABS    (ABS,CODE)
